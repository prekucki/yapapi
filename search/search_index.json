{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Golem Python API How to use Rendering from yapapi.runner import Engine , Task , vm from datetime import timedelta async def main (): package = await vm . repo ( image_hash = \"ef007138617985ebb871e4305bc86fc97073f1ea9ab0ade9ad492ea995c4bc8b\" , min_mem_gib = 0.5 , min_storage_gib = 2.0 , ) async def worker ( ctx , tasks ): ctx . send_file ( \"./scene.blend\" , \"/golem/resource/scene.blend\" ) async for task in tasks : frame = task . data ctx . begin () crops = [ { \"outfilebasename\" : \"out\" , \"borders_x\" : [ 0.0 , 1.0 ], \"borders_y\" : [ 0.0 , 1.0 ], } ] ctx . send_json ( \"/golem/work/params.json\" , { \"scene_file\" : \"/golem/resource/scene.blend\" , \"resolution\" : ( 800 , 600 ), \"use_compositing\" : False , \"crops\" : crops , \"samples\" : 100 , \"frames\" : [ frame ], \"output_format\" : \"PNG\" , \"RESOURCES_DIR\" : \"/golem/resources\" , \"WORK_DIR\" : \"/golem/work\" , \"OUTPUT_DIR\" : \"/golem/output\" , }, ) ctx . run ( \"/golem/entrypoints/render_entrypoint.py\" ) ctx . download_file ( \"/golem/output/out.png\" , f \"output_ { frame } .png\" ) yield ctx . commit ( task ) # TODO: Check if job is valid # and reject by: task.reject_task(reason = 'invalid file') task . accept_task () ctx . log ( \"no more frame to render\" ) async with Engine ( package = package , max_worker = 10 , budget = 10.0 , timeout = timedelta ( minutes = 5 ), ) as engine : async for progress in engine . map ( worker , [ Task ( data = frame ) for frame in range ( 1 , 101 )] ): print ( \"progress=\" , progress )","title":"Home"},{"location":"#golem-python-api","text":"","title":"Golem Python API"},{"location":"#how-to-use","text":"Rendering from yapapi.runner import Engine , Task , vm from datetime import timedelta async def main (): package = await vm . repo ( image_hash = \"ef007138617985ebb871e4305bc86fc97073f1ea9ab0ade9ad492ea995c4bc8b\" , min_mem_gib = 0.5 , min_storage_gib = 2.0 , ) async def worker ( ctx , tasks ): ctx . send_file ( \"./scene.blend\" , \"/golem/resource/scene.blend\" ) async for task in tasks : frame = task . data ctx . begin () crops = [ { \"outfilebasename\" : \"out\" , \"borders_x\" : [ 0.0 , 1.0 ], \"borders_y\" : [ 0.0 , 1.0 ], } ] ctx . send_json ( \"/golem/work/params.json\" , { \"scene_file\" : \"/golem/resource/scene.blend\" , \"resolution\" : ( 800 , 600 ), \"use_compositing\" : False , \"crops\" : crops , \"samples\" : 100 , \"frames\" : [ frame ], \"output_format\" : \"PNG\" , \"RESOURCES_DIR\" : \"/golem/resources\" , \"WORK_DIR\" : \"/golem/work\" , \"OUTPUT_DIR\" : \"/golem/output\" , }, ) ctx . run ( \"/golem/entrypoints/render_entrypoint.py\" ) ctx . download_file ( \"/golem/output/out.png\" , f \"output_ { frame } .png\" ) yield ctx . commit ( task ) # TODO: Check if job is valid # and reject by: task.reject_task(reason = 'invalid file') task . accept_task () ctx . log ( \"no more frame to render\" ) async with Engine ( package = package , max_worker = 10 , budget = 10.0 , timeout = timedelta ( minutes = 5 ), ) as engine : async for progress in engine . map ( worker , [ Task ( data = frame ) for frame in range ( 1 , 101 )] ): print ( \"progress=\" , progress )","title":"How to use"},{"location":"docs/Low-Level-Api/","text":"Low Level API General Concept from yapapi.rest import Configuration , Market , Activity , Payment from yapapi import props as yp from yapapi.props.builder import DemandBuilder from datetime import datetime , timezone async def list_offers ( conf : Configuration ): async with conf . market () as client : market_api = Market ( client ) dbuild = DemandBuilder () dbuild . add ( yp . Identification ( name = \"some scanning node\" )) dbuild . add ( yp . Activity ( expiration = datetime . now ( timezone . utc ))) async with market_api . subscribe ( dbuild . props , dbuild . cons ) as subscription : async for event in subscription . events (): print ( \"event=\" , event ) print ( \"done\" ) Access Configuration Class yapapi.rest.Configuration(...) Initialization Arguments app_key : (optional) str : Defines access token to API Gateway","title":"Low-Level"},{"location":"docs/Low-Level-Api/#low-level-api","text":"","title":"Low Level API"},{"location":"docs/Low-Level-Api/#general-concept","text":"from yapapi.rest import Configuration , Market , Activity , Payment from yapapi import props as yp from yapapi.props.builder import DemandBuilder from datetime import datetime , timezone async def list_offers ( conf : Configuration ): async with conf . market () as client : market_api = Market ( client ) dbuild = DemandBuilder () dbuild . add ( yp . Identification ( name = \"some scanning node\" )) dbuild . add ( yp . Activity ( expiration = datetime . now ( timezone . utc ))) async with market_api . subscribe ( dbuild . props , dbuild . cons ) as subscription : async for event in subscription . events (): print ( \"event=\" , event ) print ( \"done\" )","title":"General Concept"},{"location":"docs/Low-Level-Api/#access-configuration","text":"","title":"Access Configuration"},{"location":"docs/Low-Level-Api/#class-yapapirestconfiguration","text":"Initialization Arguments app_key : (optional) str : Defines access token to API Gateway","title":"Class yapapi.rest.Configuration(...)"},{"location":"docs/VM-Tutorial/","text":"VM Runtime Enviroment Prerequisites docker engine >= 19.03.6 python >=3.6 yagna (base package) >=0.3.0 Development Setup TODO Exposing container Example app","title":"Tutorial"},{"location":"docs/VM-Tutorial/#vm-runtime-enviroment","text":"","title":"VM Runtime Enviroment"},{"location":"docs/VM-Tutorial/#prerequisites","text":"docker engine >= 19.03.6 python >=3.6 yagna (base package) >=0.3.0","title":"Prerequisites"},{"location":"docs/VM-Tutorial/#development-setup","text":"TODO","title":"Development Setup"},{"location":"docs/VM-Tutorial/#exposing-container","text":"","title":"Exposing container"},{"location":"docs/VM-Tutorial/#example-app","text":"","title":"Example app"},{"location":"reference/yapapi/","text":"Module yapapi Sub-modules yapapi.props yapapi.rest yapapi.runner yapapi.storage","title":"Index"},{"location":"reference/yapapi/#module-yapapi","text":"","title":"Module yapapi"},{"location":"reference/yapapi/#sub-modules","text":"yapapi.props yapapi.rest yapapi.runner yapapi.storage","title":"Sub-modules"},{"location":"reference/yapapi/props/","text":"Module yapapi.props Sub-modules yapapi.props.base yapapi.props.builder yapapi.props.com yapapi.props.inf Variables ActivityKeys IdentificationKeys Classes Activity class Activity ( cost_cap : Union [ decimal . Decimal , NoneType ] = None , cost_warning : Union [ decimal . Decimal , NoneType ] = None , timeout_secs : Union [ float , NoneType ] = None , expiration : Union [ datetime . datetime , NoneType ] = None ) Activity-related Properties Ancestors (in MRO) yapapi.props.base.Model abc.ABC Class variables cost_cap cost_warning expiration timeout_secs Static methods from_props def from_props ( props : Dict [ str , str ] ) -> ~ ME keys def keys ( ) Identification class Identification ( name : Union [ str , NoneType ] = None , subnet_tag : Union [ str , NoneType ] = None ) Identification(name:Union[str, NoneType]=None, subnet_tag:Union[str, NoneType]=None) Ancestors (in MRO) yapapi.props.base.Model abc.ABC Class variables name subnet_tag Static methods from_props def from_props ( props : Dict [ str , str ] ) -> ~ ME keys def keys ( )","title":"Index"},{"location":"reference/yapapi/props/#module-yapapiprops","text":"","title":"Module yapapi.props"},{"location":"reference/yapapi/props/#sub-modules","text":"yapapi.props.base yapapi.props.builder yapapi.props.com yapapi.props.inf","title":"Sub-modules"},{"location":"reference/yapapi/props/#variables","text":"ActivityKeys IdentificationKeys","title":"Variables"},{"location":"reference/yapapi/props/#classes","text":"","title":"Classes"},{"location":"reference/yapapi/props/#activity","text":"class Activity ( cost_cap : Union [ decimal . Decimal , NoneType ] = None , cost_warning : Union [ decimal . Decimal , NoneType ] = None , timeout_secs : Union [ float , NoneType ] = None , expiration : Union [ datetime . datetime , NoneType ] = None ) Activity-related Properties","title":"Activity"},{"location":"reference/yapapi/props/#ancestors-in-mro","text":"yapapi.props.base.Model abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/props/#class-variables","text":"cost_cap cost_warning expiration timeout_secs","title":"Class variables"},{"location":"reference/yapapi/props/#static-methods","text":"","title":"Static methods"},{"location":"reference/yapapi/props/#from_props","text":"def from_props ( props : Dict [ str , str ] ) -> ~ ME","title":"from_props"},{"location":"reference/yapapi/props/#keys","text":"def keys ( )","title":"keys"},{"location":"reference/yapapi/props/#identification","text":"class Identification ( name : Union [ str , NoneType ] = None , subnet_tag : Union [ str , NoneType ] = None ) Identification(name:Union[str, NoneType]=None, subnet_tag:Union[str, NoneType]=None)","title":"Identification"},{"location":"reference/yapapi/props/#ancestors-in-mro_1","text":"yapapi.props.base.Model abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/props/#class-variables_1","text":"name subnet_tag","title":"Class variables"},{"location":"reference/yapapi/props/#static-methods_1","text":"","title":"Static methods"},{"location":"reference/yapapi/props/#from_props_1","text":"def from_props ( props : Dict [ str , str ] ) -> ~ ME","title":"from_props"},{"location":"reference/yapapi/props/#keys_1","text":"def keys ( )","title":"keys"},{"location":"reference/yapapi/props/base/","text":"Module yapapi.props.base Functions as_list def as_list ( data : Union [ str , List [ str ]] ) -> List [ str ] Classes Model class Model ( ** kwargs ) Helper class that provides a standard way to create an ABC using inheritance. Ancestors (in MRO) abc.ABC Descendants yapapi.props.Identification yapapi.props.Activity yapapi.props.com.Com yapapi.props.inf.InfBase yapapi.props.inf.ExeUnitRequest Static methods from_props def from_props ( props : Dict [ str , str ] ) -> ~ ME keys def keys ( ) Props class Props ( / , * args , ** kwargs ) dict() -> new empty dictionary dict(mapping) -> new dictionary initialized from a mapping object's (key, value) pairs dict(iterable) -> new dictionary initialized as if via: d = {} for k, v in iterable: d[k] = v dict(**kwargs) -> new dictionary initialized with the name=value pairs in the keyword argument list. For example: dict(one=1, two=2) Ancestors (in MRO) typing.Dict builtins.dict typing.MutableMapping collections.abc.MutableMapping typing.Mapping collections.abc.Mapping typing.Collection collections.abc.Collection collections.abc.Sized typing.Iterable collections.abc.Iterable typing.Container collections.abc.Container typing.Generic Methods clear def clear ( ... ) D.clear() -> None. Remove all items from D. copy def copy ( ... ) D.copy() -> a shallow copy of D fromkeys def fromkeys ( iterable , value = None , / ) Returns a new dict with keys from iterable and values equal to value. get def get ( ... ) D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. items def items ( ... ) D.items() -> a set-like object providing a view on D's items keys def keys ( ... ) D.keys() -> a set-like object providing a view on D's keys pop def pop ( ... ) D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised popitem def popitem ( ... ) D.popitem() -> (k, v), remove and return some (key, value) pair as a 2-tuple; but raise KeyError if D is empty. setdefault def setdefault ( ... ) D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D update def update ( ... ) D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E is present and has a .keys() method, then does: for k in E: D[k] = E[k] If E is present and lacks a .keys() method, then does: for k, v in E: D[k] = v In either case, this is followed by: for k in F: D[k] = F[k] values def values ( ... ) D.values() -> an object providing a view on D's values","title":"Base"},{"location":"reference/yapapi/props/base/#module-yapapipropsbase","text":"","title":"Module yapapi.props.base"},{"location":"reference/yapapi/props/base/#functions","text":"","title":"Functions"},{"location":"reference/yapapi/props/base/#as_list","text":"def as_list ( data : Union [ str , List [ str ]] ) -> List [ str ]","title":"as_list"},{"location":"reference/yapapi/props/base/#classes","text":"","title":"Classes"},{"location":"reference/yapapi/props/base/#model","text":"class Model ( ** kwargs ) Helper class that provides a standard way to create an ABC using inheritance.","title":"Model"},{"location":"reference/yapapi/props/base/#ancestors-in-mro","text":"abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/props/base/#descendants","text":"yapapi.props.Identification yapapi.props.Activity yapapi.props.com.Com yapapi.props.inf.InfBase yapapi.props.inf.ExeUnitRequest","title":"Descendants"},{"location":"reference/yapapi/props/base/#static-methods","text":"","title":"Static methods"},{"location":"reference/yapapi/props/base/#from_props","text":"def from_props ( props : Dict [ str , str ] ) -> ~ ME","title":"from_props"},{"location":"reference/yapapi/props/base/#keys","text":"def keys ( )","title":"keys"},{"location":"reference/yapapi/props/base/#props","text":"class Props ( / , * args , ** kwargs ) dict() -> new empty dictionary dict(mapping) -> new dictionary initialized from a mapping object's (key, value) pairs dict(iterable) -> new dictionary initialized as if via: d = {} for k, v in iterable: d[k] = v dict(**kwargs) -> new dictionary initialized with the name=value pairs in the keyword argument list. For example: dict(one=1, two=2)","title":"Props"},{"location":"reference/yapapi/props/base/#ancestors-in-mro_1","text":"typing.Dict builtins.dict typing.MutableMapping collections.abc.MutableMapping typing.Mapping collections.abc.Mapping typing.Collection collections.abc.Collection collections.abc.Sized typing.Iterable collections.abc.Iterable typing.Container collections.abc.Container typing.Generic","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/props/base/#methods","text":"","title":"Methods"},{"location":"reference/yapapi/props/base/#clear","text":"def clear ( ... ) D.clear() -> None. Remove all items from D.","title":"clear"},{"location":"reference/yapapi/props/base/#copy","text":"def copy ( ... ) D.copy() -> a shallow copy of D","title":"copy"},{"location":"reference/yapapi/props/base/#fromkeys","text":"def fromkeys ( iterable , value = None , / ) Returns a new dict with keys from iterable and values equal to value.","title":"fromkeys"},{"location":"reference/yapapi/props/base/#get","text":"def get ( ... ) D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None.","title":"get"},{"location":"reference/yapapi/props/base/#items","text":"def items ( ... ) D.items() -> a set-like object providing a view on D's items","title":"items"},{"location":"reference/yapapi/props/base/#keys_1","text":"def keys ( ... ) D.keys() -> a set-like object providing a view on D's keys","title":"keys"},{"location":"reference/yapapi/props/base/#pop","text":"def pop ( ... ) D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised","title":"pop"},{"location":"reference/yapapi/props/base/#popitem","text":"def popitem ( ... ) D.popitem() -> (k, v), remove and return some (key, value) pair as a 2-tuple; but raise KeyError if D is empty.","title":"popitem"},{"location":"reference/yapapi/props/base/#setdefault","text":"def setdefault ( ... ) D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D","title":"setdefault"},{"location":"reference/yapapi/props/base/#update","text":"def update ( ... ) D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E is present and has a .keys() method, then does: for k in E: D[k] = E[k] If E is present and lacks a .keys() method, then does: for k, v in E: D[k] = v In either case, this is followed by: for k in F: D[k] = F[k]","title":"update"},{"location":"reference/yapapi/props/base/#values","text":"def values ( ... ) D.values() -> an object providing a view on D's values","title":"values"},{"location":"reference/yapapi/props/builder/","text":"Module yapapi.props.builder Classes DemandBuilder class DemandBuilder ( ) Instance variables cons props Methods add def add ( self , m : yapapi . props . base . Model ) ensure def ensure ( self , constraint : str ) subscribe def subscribe ( self , market : yapapi . rest . market . Market ) -> yapapi . rest . market . Subscription","title":"Builder"},{"location":"reference/yapapi/props/builder/#module-yapapipropsbuilder","text":"","title":"Module yapapi.props.builder"},{"location":"reference/yapapi/props/builder/#classes","text":"","title":"Classes"},{"location":"reference/yapapi/props/builder/#demandbuilder","text":"class DemandBuilder ( )","title":"DemandBuilder"},{"location":"reference/yapapi/props/builder/#instance-variables","text":"cons props","title":"Instance variables"},{"location":"reference/yapapi/props/builder/#methods","text":"","title":"Methods"},{"location":"reference/yapapi/props/builder/#add","text":"def add ( self , m : yapapi . props . base . Model )","title":"add"},{"location":"reference/yapapi/props/builder/#ensure","text":"def ensure ( self , constraint : str )","title":"ensure"},{"location":"reference/yapapi/props/builder/#subscribe","text":"def subscribe ( self , market : yapapi . rest . market . Market ) -> yapapi . rest . market . Subscription","title":"subscribe"},{"location":"reference/yapapi/props/com/","text":"Module yapapi.props.com Variables DEFINED_USAGES LINEAR_COEFFS PRICE_MODEL SCHEME Classes BillingScheme class BillingScheme ( / , * args , ** kwargs ) An enumeration. Ancestors (in MRO) enum.Enum Class variables PAYU name value Com class Com ( scheme : yapapi . props . com . BillingScheme , price_model : yapapi . props . com . PriceModel ) Com(scheme:yapapi.props.com.BillingScheme, price_model:yapapi.props.com.PriceModel) Ancestors (in MRO) yapapi.props.base.Model abc.ABC Descendants yapapi.props.com.ComLinear Static methods from_props def from_props ( props : Dict [ str , str ] ) -> ~ ME keys def keys ( ) ComLinear class ComLinear ( scheme : yapapi . props . com . BillingScheme , price_model : yapapi . props . com . PriceModel , fixed_price : float , price_for : Dict [ yapapi . props . com . Counter , float ] ) ComLinear(scheme:yapapi.props.com.BillingScheme, price_model:yapapi.props.com.PriceModel, fixed_price:float, price_for:Dict[yapapi.props.com.Counter, float]) Ancestors (in MRO) yapapi.props.com.Com yapapi.props.base.Model abc.ABC Static methods from_props def from_props ( props : Dict [ str , str ] ) -> ~ ME keys def keys ( ) Counter class Counter ( / , * args , ** kwargs ) An enumeration. Ancestors (in MRO) enum.Enum Class variables CPU MAXMEM STORAGE TIME UNKNOWN name value PriceModel class PriceModel ( / , * args , ** kwargs ) An enumeration. Ancestors (in MRO) enum.Enum Class variables LINEAR name value","title":"Com"},{"location":"reference/yapapi/props/com/#module-yapapipropscom","text":"","title":"Module yapapi.props.com"},{"location":"reference/yapapi/props/com/#variables","text":"DEFINED_USAGES LINEAR_COEFFS PRICE_MODEL SCHEME","title":"Variables"},{"location":"reference/yapapi/props/com/#classes","text":"","title":"Classes"},{"location":"reference/yapapi/props/com/#billingscheme","text":"class BillingScheme ( / , * args , ** kwargs ) An enumeration.","title":"BillingScheme"},{"location":"reference/yapapi/props/com/#ancestors-in-mro","text":"enum.Enum","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/props/com/#class-variables","text":"PAYU name value","title":"Class variables"},{"location":"reference/yapapi/props/com/#com","text":"class Com ( scheme : yapapi . props . com . BillingScheme , price_model : yapapi . props . com . PriceModel ) Com(scheme:yapapi.props.com.BillingScheme, price_model:yapapi.props.com.PriceModel)","title":"Com"},{"location":"reference/yapapi/props/com/#ancestors-in-mro_1","text":"yapapi.props.base.Model abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/props/com/#descendants","text":"yapapi.props.com.ComLinear","title":"Descendants"},{"location":"reference/yapapi/props/com/#static-methods","text":"","title":"Static methods"},{"location":"reference/yapapi/props/com/#from_props","text":"def from_props ( props : Dict [ str , str ] ) -> ~ ME","title":"from_props"},{"location":"reference/yapapi/props/com/#keys","text":"def keys ( )","title":"keys"},{"location":"reference/yapapi/props/com/#comlinear","text":"class ComLinear ( scheme : yapapi . props . com . BillingScheme , price_model : yapapi . props . com . PriceModel , fixed_price : float , price_for : Dict [ yapapi . props . com . Counter , float ] ) ComLinear(scheme:yapapi.props.com.BillingScheme, price_model:yapapi.props.com.PriceModel, fixed_price:float, price_for:Dict[yapapi.props.com.Counter, float])","title":"ComLinear"},{"location":"reference/yapapi/props/com/#ancestors-in-mro_2","text":"yapapi.props.com.Com yapapi.props.base.Model abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/props/com/#static-methods_1","text":"","title":"Static methods"},{"location":"reference/yapapi/props/com/#from_props_1","text":"def from_props ( props : Dict [ str , str ] ) -> ~ ME","title":"from_props"},{"location":"reference/yapapi/props/com/#keys_1","text":"def keys ( )","title":"keys"},{"location":"reference/yapapi/props/com/#counter","text":"class Counter ( / , * args , ** kwargs ) An enumeration.","title":"Counter"},{"location":"reference/yapapi/props/com/#ancestors-in-mro_3","text":"enum.Enum","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/props/com/#class-variables_1","text":"CPU MAXMEM STORAGE TIME UNKNOWN name value","title":"Class variables"},{"location":"reference/yapapi/props/com/#pricemodel","text":"class PriceModel ( / , * args , ** kwargs ) An enumeration.","title":"PriceModel"},{"location":"reference/yapapi/props/com/#ancestors-in-mro_4","text":"enum.Enum","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/props/com/#class-variables_2","text":"LINEAR name value","title":"Class variables"},{"location":"reference/yapapi/props/inf/","text":"Module yapapi.props.inf Infrastructural Properties Variables INF_CORES INF_MEM INF_STORAGE InfVmKeys TRANSFER_CAPS Classes ExeUnitRequest class ExeUnitRequest ( package_url : str ) ExeUnitRequest(package_url:str) Ancestors (in MRO) yapapi.props.base.Model abc.ABC Descendants yapapi.props.inf.VmRequest Static methods from_props def from_props ( props : Dict [ str , str ] ) -> ~ ME keys def keys ( ) InfBase class InfBase ( mem : float , runtime : yapapi . props . inf . RuntimeType , storage : Union [ float , NoneType ] = None , transfers : Union [ List [ str ], NoneType ] = None ) InfBase(mem:float, runtime:yapapi.props.inf.RuntimeType, storage:Union[float, NoneType]=None, transfers:Union[List[str], NoneType]=None) Ancestors (in MRO) yapapi.props.base.Model abc.ABC Descendants yapapi.props.inf.InfVm Class variables storage transfers Static methods from_props def from_props ( props : Dict [ str , str ] ) -> ~ ME keys def keys ( ) InfVm class InfVm ( mem : float , runtime : yapapi . props . inf . RuntimeType , storage : Union [ float , NoneType ] = None , transfers : Union [ List [ str ], NoneType ] = None , cores : int = 1 ) InfVm(mem:float, runtime:yapapi.props.inf.RuntimeType, storage:Union[float, NoneType]=None, transfers:Union[List[str], NoneType]=None, cores:int=1) Ancestors (in MRO) yapapi.props.inf.InfBase yapapi.props.base.Model abc.ABC Class variables cores runtime storage transfers Static methods from_props def from_props ( props : Dict [ str , str ] ) -> ~ ME keys def keys ( ) RuntimeType class RuntimeType ( ) An enumeration. Ancestors (in MRO) enum.Enum Class variables EMSCRIPTEN UNKNOWN VM WASMTIME name value VmPackageFormat class VmPackageFormat ( / , * args , ** kwargs ) An enumeration. Ancestors (in MRO) enum.Enum Class variables GVMKIT_SQUASH UNKNOWN name value VmRequest class VmRequest ( package_url : str , package_format : yapapi . props . inf . VmPackageFormat ) VmRequest(package_url:str, package_format:yapapi.props.inf.VmPackageFormat) Ancestors (in MRO) yapapi.props.inf.ExeUnitRequest yapapi.props.base.Model abc.ABC Static methods from_props def from_props ( props : Dict [ str , str ] ) -> ~ ME keys def keys ( ) WasmInterface class WasmInterface ( ) An enumeration. Ancestors (in MRO) enum.Enum Class variables WASI_0 WASI_0preview1 name value","title":"Inf"},{"location":"reference/yapapi/props/inf/#module-yapapipropsinf","text":"Infrastructural Properties","title":"Module yapapi.props.inf"},{"location":"reference/yapapi/props/inf/#variables","text":"INF_CORES INF_MEM INF_STORAGE InfVmKeys TRANSFER_CAPS","title":"Variables"},{"location":"reference/yapapi/props/inf/#classes","text":"","title":"Classes"},{"location":"reference/yapapi/props/inf/#exeunitrequest","text":"class ExeUnitRequest ( package_url : str ) ExeUnitRequest(package_url:str)","title":"ExeUnitRequest"},{"location":"reference/yapapi/props/inf/#ancestors-in-mro","text":"yapapi.props.base.Model abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/props/inf/#descendants","text":"yapapi.props.inf.VmRequest","title":"Descendants"},{"location":"reference/yapapi/props/inf/#static-methods","text":"","title":"Static methods"},{"location":"reference/yapapi/props/inf/#from_props","text":"def from_props ( props : Dict [ str , str ] ) -> ~ ME","title":"from_props"},{"location":"reference/yapapi/props/inf/#keys","text":"def keys ( )","title":"keys"},{"location":"reference/yapapi/props/inf/#infbase","text":"class InfBase ( mem : float , runtime : yapapi . props . inf . RuntimeType , storage : Union [ float , NoneType ] = None , transfers : Union [ List [ str ], NoneType ] = None ) InfBase(mem:float, runtime:yapapi.props.inf.RuntimeType, storage:Union[float, NoneType]=None, transfers:Union[List[str], NoneType]=None)","title":"InfBase"},{"location":"reference/yapapi/props/inf/#ancestors-in-mro_1","text":"yapapi.props.base.Model abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/props/inf/#descendants_1","text":"yapapi.props.inf.InfVm","title":"Descendants"},{"location":"reference/yapapi/props/inf/#class-variables","text":"storage transfers","title":"Class variables"},{"location":"reference/yapapi/props/inf/#static-methods_1","text":"","title":"Static methods"},{"location":"reference/yapapi/props/inf/#from_props_1","text":"def from_props ( props : Dict [ str , str ] ) -> ~ ME","title":"from_props"},{"location":"reference/yapapi/props/inf/#keys_1","text":"def keys ( )","title":"keys"},{"location":"reference/yapapi/props/inf/#infvm","text":"class InfVm ( mem : float , runtime : yapapi . props . inf . RuntimeType , storage : Union [ float , NoneType ] = None , transfers : Union [ List [ str ], NoneType ] = None , cores : int = 1 ) InfVm(mem:float, runtime:yapapi.props.inf.RuntimeType, storage:Union[float, NoneType]=None, transfers:Union[List[str], NoneType]=None, cores:int=1)","title":"InfVm"},{"location":"reference/yapapi/props/inf/#ancestors-in-mro_2","text":"yapapi.props.inf.InfBase yapapi.props.base.Model abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/props/inf/#class-variables_1","text":"cores runtime storage transfers","title":"Class variables"},{"location":"reference/yapapi/props/inf/#static-methods_2","text":"","title":"Static methods"},{"location":"reference/yapapi/props/inf/#from_props_2","text":"def from_props ( props : Dict [ str , str ] ) -> ~ ME","title":"from_props"},{"location":"reference/yapapi/props/inf/#keys_2","text":"def keys ( )","title":"keys"},{"location":"reference/yapapi/props/inf/#runtimetype","text":"class RuntimeType ( ) An enumeration.","title":"RuntimeType"},{"location":"reference/yapapi/props/inf/#ancestors-in-mro_3","text":"enum.Enum","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/props/inf/#class-variables_2","text":"EMSCRIPTEN UNKNOWN VM WASMTIME name value","title":"Class variables"},{"location":"reference/yapapi/props/inf/#vmpackageformat","text":"class VmPackageFormat ( / , * args , ** kwargs ) An enumeration.","title":"VmPackageFormat"},{"location":"reference/yapapi/props/inf/#ancestors-in-mro_4","text":"enum.Enum","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/props/inf/#class-variables_3","text":"GVMKIT_SQUASH UNKNOWN name value","title":"Class variables"},{"location":"reference/yapapi/props/inf/#vmrequest","text":"class VmRequest ( package_url : str , package_format : yapapi . props . inf . VmPackageFormat ) VmRequest(package_url:str, package_format:yapapi.props.inf.VmPackageFormat)","title":"VmRequest"},{"location":"reference/yapapi/props/inf/#ancestors-in-mro_5","text":"yapapi.props.inf.ExeUnitRequest yapapi.props.base.Model abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/props/inf/#static-methods_3","text":"","title":"Static methods"},{"location":"reference/yapapi/props/inf/#from_props_3","text":"def from_props ( props : Dict [ str , str ] ) -> ~ ME","title":"from_props"},{"location":"reference/yapapi/props/inf/#keys_3","text":"def keys ( )","title":"keys"},{"location":"reference/yapapi/props/inf/#wasminterface","text":"class WasmInterface ( ) An enumeration.","title":"WasmInterface"},{"location":"reference/yapapi/props/inf/#ancestors-in-mro_6","text":"enum.Enum","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/props/inf/#class-variables_4","text":"WASI_0 WASI_0preview1 name value","title":"Class variables"},{"location":"reference/yapapi/rest/","text":"Module yapapi.rest Mid level binding for Golem REST API Sub-modules yapapi.rest.activity yapapi.rest.configuration yapapi.rest.market yapapi.rest.payment yapapi.rest.resource Classes Activity class Activity ( api_client : ya_activity . api_client . ApiClient ) Methods new_activity def new_activity ( self , agreement_id : str ) -> 'Activity' Configuration class Configuration ( app_key = None , * , url : Union [ str , NoneType ] = None , market_url : Union [ str , NoneType ] = None , payment_url : Union [ str , NoneType ] = None , activity_url : Union [ str , NoneType ] = None ) Instance variables activity_url app_key market_url payment_url Methods activity def activity ( self ) -> ya_activity . api_client . ApiClient market def market ( self ) -> ya_market . api_client . ApiClient payment def payment ( self ) -> ya_payment . api_client . ApiClient Market class Market ( api_client : ya_market . api_client . ApiClient ) Methods subscribe def subscribe ( self , props : dict , constraints : str ) -> yapapi . rest . market . AsyncResource subscriptions def subscriptions ( self ) -> AsyncIterator [ yapapi . rest . market . Subscription ] Payment class Payment ( api_client : ya_payment . api_client . ApiClient ) Methods allocation def allocation ( self , allocation_id : str ) -> yapapi . rest . payment . Allocation allocations def allocations ( self ) -> AsyncIterator [ yapapi . rest . payment . Allocation ] Lists all active allocations. Example: Listing all active allocations from yapapi import rest async def list_allocations ( payment_api : rest . Payment ): async for allocation in payment_api . allocations (): print ( f '''allocation: {allocation.id} amount={allocation.amount}, expires={allocation.expires}''' ) incoming_invoices def incoming_invoices ( self ) -> AsyncIterator [ yapapi . rest . payment . Invoice ] invoice def invoice ( self , invoice_id : str ) -> yapapi . rest . payment . Invoice invoices def invoices ( self ) -> AsyncIterator [ yapapi . rest . payment . Invoice ] new_allocation def new_allocation ( self , amount : decimal . Decimal , * , expires : Union [ datetime . datetime , NoneType ] = None , make_deposit : bool = False ) -> yapapi . rest . resource . ResourceCtx Creates new allocation. amount : Allocation amount. expires : expiration timestamp. by default 30 minutes from now. make_deposit : (unimplemented).","title":"Index"},{"location":"reference/yapapi/rest/#module-yapapirest","text":"Mid level binding for Golem REST API","title":"Module yapapi.rest"},{"location":"reference/yapapi/rest/#sub-modules","text":"yapapi.rest.activity yapapi.rest.configuration yapapi.rest.market yapapi.rest.payment yapapi.rest.resource","title":"Sub-modules"},{"location":"reference/yapapi/rest/#classes","text":"","title":"Classes"},{"location":"reference/yapapi/rest/#activity","text":"class Activity ( api_client : ya_activity . api_client . ApiClient )","title":"Activity"},{"location":"reference/yapapi/rest/#methods","text":"","title":"Methods"},{"location":"reference/yapapi/rest/#new_activity","text":"def new_activity ( self , agreement_id : str ) -> 'Activity'","title":"new_activity"},{"location":"reference/yapapi/rest/#configuration","text":"class Configuration ( app_key = None , * , url : Union [ str , NoneType ] = None , market_url : Union [ str , NoneType ] = None , payment_url : Union [ str , NoneType ] = None , activity_url : Union [ str , NoneType ] = None )","title":"Configuration"},{"location":"reference/yapapi/rest/#instance-variables","text":"activity_url app_key market_url payment_url","title":"Instance variables"},{"location":"reference/yapapi/rest/#methods_1","text":"","title":"Methods"},{"location":"reference/yapapi/rest/#activity_1","text":"def activity ( self ) -> ya_activity . api_client . ApiClient","title":"activity"},{"location":"reference/yapapi/rest/#market","text":"def market ( self ) -> ya_market . api_client . ApiClient","title":"market"},{"location":"reference/yapapi/rest/#payment","text":"def payment ( self ) -> ya_payment . api_client . ApiClient","title":"payment"},{"location":"reference/yapapi/rest/#market_1","text":"class Market ( api_client : ya_market . api_client . ApiClient )","title":"Market"},{"location":"reference/yapapi/rest/#methods_2","text":"","title":"Methods"},{"location":"reference/yapapi/rest/#subscribe","text":"def subscribe ( self , props : dict , constraints : str ) -> yapapi . rest . market . AsyncResource","title":"subscribe"},{"location":"reference/yapapi/rest/#subscriptions","text":"def subscriptions ( self ) -> AsyncIterator [ yapapi . rest . market . Subscription ]","title":"subscriptions"},{"location":"reference/yapapi/rest/#payment_1","text":"class Payment ( api_client : ya_payment . api_client . ApiClient )","title":"Payment"},{"location":"reference/yapapi/rest/#methods_3","text":"","title":"Methods"},{"location":"reference/yapapi/rest/#allocation","text":"def allocation ( self , allocation_id : str ) -> yapapi . rest . payment . Allocation","title":"allocation"},{"location":"reference/yapapi/rest/#allocations","text":"def allocations ( self ) -> AsyncIterator [ yapapi . rest . payment . Allocation ] Lists all active allocations. Example: Listing all active allocations from yapapi import rest async def list_allocations ( payment_api : rest . Payment ): async for allocation in payment_api . allocations (): print ( f '''allocation: {allocation.id} amount={allocation.amount}, expires={allocation.expires}''' )","title":"allocations"},{"location":"reference/yapapi/rest/#incoming_invoices","text":"def incoming_invoices ( self ) -> AsyncIterator [ yapapi . rest . payment . Invoice ]","title":"incoming_invoices"},{"location":"reference/yapapi/rest/#invoice","text":"def invoice ( self , invoice_id : str ) -> yapapi . rest . payment . Invoice","title":"invoice"},{"location":"reference/yapapi/rest/#invoices","text":"def invoices ( self ) -> AsyncIterator [ yapapi . rest . payment . Invoice ]","title":"invoices"},{"location":"reference/yapapi/rest/#new_allocation","text":"def new_allocation ( self , amount : decimal . Decimal , * , expires : Union [ datetime . datetime , NoneType ] = None , make_deposit : bool = False ) -> yapapi . rest . resource . ResourceCtx Creates new allocation. amount : Allocation amount. expires : expiration timestamp. by default 30 minutes from now. make_deposit : (unimplemented).","title":"new_allocation"},{"location":"reference/yapapi/rest/activity/","text":"Module yapapi.rest.activity Classes Activity class Activity ( _api : ya_activity . api . requestor_control_api . RequestorControlApi , _state : ya_activity . api . requestor_state_api . RequestorStateApi , activity_id : str ) Abstract base class for generic types. A generic type is typically declared by inheriting from this class parameterized with one or more type variables. For example, a generic mapping type might be defined as:: class Mapping(Generic[KT, VT]): def getitem (self, key: KT) -> VT: ... # Etc. This class can then be used as follows:: def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT: try: return mapping[key] except KeyError: return default Ancestors (in MRO) typing.AsyncContextManager typing.Generic Instance variables id Methods send def send ( self , script : List [ dict ] ) state def state ( self ) -> ya_activity . models . activity_state . ActivityState ActivityService class ActivityService ( api_client : ya_activity . api_client . ApiClient ) Methods new_activity def new_activity ( self , agreement_id : str ) -> 'Activity' Batch class Batch ( _api : ya_activity . api . requestor_control_api . RequestorControlApi , activity_id : str , batch_id : str , batch_size : int ) Abstract base class for generic types. A generic type is typically declared by inheriting from this class parameterized with one or more type variables. For example, a generic mapping type might be defined as:: class Mapping(Generic[KT, VT]): def getitem (self, key: KT) -> VT: ... # Etc. This class can then be used as follows:: def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT: try: return mapping[key] except KeyError: return default Ancestors (in MRO) typing.AsyncIterable collections.abc.AsyncIterable typing.Generic collections.abc.Sized Instance variables id CommandExecutionError class CommandExecutionError ( / , * args , ** kwargs ) Common base class for all non-exit exceptions. Ancestors (in MRO) builtins.Exception builtins.BaseException Class variables args Methods with_traceback def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self. Result class Result ( idx : int , message : Union [ str , NoneType ] ) Result(idx:int, message:Union[str, NoneType])","title":"Activity"},{"location":"reference/yapapi/rest/activity/#module-yapapirestactivity","text":"","title":"Module yapapi.rest.activity"},{"location":"reference/yapapi/rest/activity/#classes","text":"","title":"Classes"},{"location":"reference/yapapi/rest/activity/#activity","text":"class Activity ( _api : ya_activity . api . requestor_control_api . RequestorControlApi , _state : ya_activity . api . requestor_state_api . RequestorStateApi , activity_id : str ) Abstract base class for generic types. A generic type is typically declared by inheriting from this class parameterized with one or more type variables. For example, a generic mapping type might be defined as:: class Mapping(Generic[KT, VT]): def getitem (self, key: KT) -> VT: ... # Etc. This class can then be used as follows:: def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT: try: return mapping[key] except KeyError: return default","title":"Activity"},{"location":"reference/yapapi/rest/activity/#ancestors-in-mro","text":"typing.AsyncContextManager typing.Generic","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/rest/activity/#instance-variables","text":"id","title":"Instance variables"},{"location":"reference/yapapi/rest/activity/#methods","text":"","title":"Methods"},{"location":"reference/yapapi/rest/activity/#send","text":"def send ( self , script : List [ dict ] )","title":"send"},{"location":"reference/yapapi/rest/activity/#state","text":"def state ( self ) -> ya_activity . models . activity_state . ActivityState","title":"state"},{"location":"reference/yapapi/rest/activity/#activityservice","text":"class ActivityService ( api_client : ya_activity . api_client . ApiClient )","title":"ActivityService"},{"location":"reference/yapapi/rest/activity/#methods_1","text":"","title":"Methods"},{"location":"reference/yapapi/rest/activity/#new_activity","text":"def new_activity ( self , agreement_id : str ) -> 'Activity'","title":"new_activity"},{"location":"reference/yapapi/rest/activity/#batch","text":"class Batch ( _api : ya_activity . api . requestor_control_api . RequestorControlApi , activity_id : str , batch_id : str , batch_size : int ) Abstract base class for generic types. A generic type is typically declared by inheriting from this class parameterized with one or more type variables. For example, a generic mapping type might be defined as:: class Mapping(Generic[KT, VT]): def getitem (self, key: KT) -> VT: ... # Etc. This class can then be used as follows:: def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT: try: return mapping[key] except KeyError: return default","title":"Batch"},{"location":"reference/yapapi/rest/activity/#ancestors-in-mro_1","text":"typing.AsyncIterable collections.abc.AsyncIterable typing.Generic collections.abc.Sized","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/rest/activity/#instance-variables_1","text":"id","title":"Instance variables"},{"location":"reference/yapapi/rest/activity/#commandexecutionerror","text":"class CommandExecutionError ( / , * args , ** kwargs ) Common base class for all non-exit exceptions.","title":"CommandExecutionError"},{"location":"reference/yapapi/rest/activity/#ancestors-in-mro_2","text":"builtins.Exception builtins.BaseException","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/rest/activity/#class-variables","text":"args","title":"Class variables"},{"location":"reference/yapapi/rest/activity/#methods_2","text":"","title":"Methods"},{"location":"reference/yapapi/rest/activity/#with_traceback","text":"def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self.","title":"with_traceback"},{"location":"reference/yapapi/rest/activity/#result","text":"class Result ( idx : int , message : Union [ str , NoneType ] ) Result(idx:int, message:Union[str, NoneType])","title":"Result"},{"location":"reference/yapapi/rest/configuration/","text":"Module yapapi.rest.configuration Variables DEFAULT_API_URL Functions env_or_fail def env_or_fail ( key : str , description : str ) -> str Classes Configuration class Configuration ( app_key = None , * , url : Union [ str , NoneType ] = None , market_url : Union [ str , NoneType ] = None , payment_url : Union [ str , NoneType ] = None , activity_url : Union [ str , NoneType ] = None ) Instance variables activity_url app_key market_url payment_url Methods activity def activity ( self ) -> ya_activity . api_client . ApiClient market def market ( self ) -> ya_market . api_client . ApiClient payment def payment ( self ) -> ya_payment . api_client . ApiClient MissingConfiguration class MissingConfiguration ( key : str , description : str ) Common base class for all non-exit exceptions. Ancestors (in MRO) builtins.Exception builtins.BaseException Class variables args Methods with_traceback def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self.","title":"Configuration"},{"location":"reference/yapapi/rest/configuration/#module-yapapirestconfiguration","text":"","title":"Module yapapi.rest.configuration"},{"location":"reference/yapapi/rest/configuration/#variables","text":"DEFAULT_API_URL","title":"Variables"},{"location":"reference/yapapi/rest/configuration/#functions","text":"","title":"Functions"},{"location":"reference/yapapi/rest/configuration/#env_or_fail","text":"def env_or_fail ( key : str , description : str ) -> str","title":"env_or_fail"},{"location":"reference/yapapi/rest/configuration/#classes","text":"","title":"Classes"},{"location":"reference/yapapi/rest/configuration/#configuration","text":"class Configuration ( app_key = None , * , url : Union [ str , NoneType ] = None , market_url : Union [ str , NoneType ] = None , payment_url : Union [ str , NoneType ] = None , activity_url : Union [ str , NoneType ] = None )","title":"Configuration"},{"location":"reference/yapapi/rest/configuration/#instance-variables","text":"activity_url app_key market_url payment_url","title":"Instance variables"},{"location":"reference/yapapi/rest/configuration/#methods","text":"","title":"Methods"},{"location":"reference/yapapi/rest/configuration/#activity","text":"def activity ( self ) -> ya_activity . api_client . ApiClient","title":"activity"},{"location":"reference/yapapi/rest/configuration/#market","text":"def market ( self ) -> ya_market . api_client . ApiClient","title":"market"},{"location":"reference/yapapi/rest/configuration/#payment","text":"def payment ( self ) -> ya_payment . api_client . ApiClient","title":"payment"},{"location":"reference/yapapi/rest/configuration/#missingconfiguration","text":"class MissingConfiguration ( key : str , description : str ) Common base class for all non-exit exceptions.","title":"MissingConfiguration"},{"location":"reference/yapapi/rest/configuration/#ancestors-in-mro","text":"builtins.Exception builtins.BaseException","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/rest/configuration/#class-variables","text":"args","title":"Class variables"},{"location":"reference/yapapi/rest/configuration/#methods_1","text":"","title":"Methods"},{"location":"reference/yapapi/rest/configuration/#with_traceback","text":"def with_traceback ( ... ) Exception.with_traceback(tb) -- set self. traceback to tb and return self.","title":"with_traceback"},{"location":"reference/yapapi/rest/market/","text":"Module yapapi.rest.market Classes Agreement class Agreement ( api : ya_market . api . requestor_api . RequestorApi , subscription : 'Subscription' , agreement_id : str ) Instance variables id Methods confirm def confirm ( self ) -> bool details def details ( self ) -> yapapi . rest . market . AgreementDetails Market class Market ( api_client : ya_market . api_client . ApiClient ) Methods subscribe def subscribe ( self , props : dict , constraints : str ) -> yapapi . rest . market . AsyncResource subscriptions def subscriptions ( self ) -> AsyncIterator [ yapapi . rest . market . Subscription ] OfferProposal class OfferProposal ( subscription : 'Subscription' , proposal : ya_market . models . proposal_event . ProposalEvent ) Instance variables id is_draft issuer props Methods agreement def agreement ( self , timeout = datetime . timedelta ( 0 , 3600 ) ) -> yapapi . rest . market . Agreement reject def reject ( self , reason : Union [ str , NoneType ] = None ) respond def respond ( self , props : dict , constraints : str ) -> str Subscription class Subscription ( api : ya_market . api . requestor_api . RequestorApi , subscription_id : str , _details : Union [ ya_market . models . demand . Demand , NoneType ] = None ) Instance variables details id Methods close def close ( self ) delete def delete ( self ) events def events ( self ) -> AsyncIterator [ yapapi . rest . market . OfferProposal ]","title":"Market"},{"location":"reference/yapapi/rest/market/#module-yapapirestmarket","text":"","title":"Module yapapi.rest.market"},{"location":"reference/yapapi/rest/market/#classes","text":"","title":"Classes"},{"location":"reference/yapapi/rest/market/#agreement","text":"class Agreement ( api : ya_market . api . requestor_api . RequestorApi , subscription : 'Subscription' , agreement_id : str )","title":"Agreement"},{"location":"reference/yapapi/rest/market/#instance-variables","text":"id","title":"Instance variables"},{"location":"reference/yapapi/rest/market/#methods","text":"","title":"Methods"},{"location":"reference/yapapi/rest/market/#confirm","text":"def confirm ( self ) -> bool","title":"confirm"},{"location":"reference/yapapi/rest/market/#details","text":"def details ( self ) -> yapapi . rest . market . AgreementDetails","title":"details"},{"location":"reference/yapapi/rest/market/#market","text":"class Market ( api_client : ya_market . api_client . ApiClient )","title":"Market"},{"location":"reference/yapapi/rest/market/#methods_1","text":"","title":"Methods"},{"location":"reference/yapapi/rest/market/#subscribe","text":"def subscribe ( self , props : dict , constraints : str ) -> yapapi . rest . market . AsyncResource","title":"subscribe"},{"location":"reference/yapapi/rest/market/#subscriptions","text":"def subscriptions ( self ) -> AsyncIterator [ yapapi . rest . market . Subscription ]","title":"subscriptions"},{"location":"reference/yapapi/rest/market/#offerproposal","text":"class OfferProposal ( subscription : 'Subscription' , proposal : ya_market . models . proposal_event . ProposalEvent )","title":"OfferProposal"},{"location":"reference/yapapi/rest/market/#instance-variables_1","text":"id is_draft issuer props","title":"Instance variables"},{"location":"reference/yapapi/rest/market/#methods_2","text":"","title":"Methods"},{"location":"reference/yapapi/rest/market/#agreement_1","text":"def agreement ( self , timeout = datetime . timedelta ( 0 , 3600 ) ) -> yapapi . rest . market . Agreement","title":"agreement"},{"location":"reference/yapapi/rest/market/#reject","text":"def reject ( self , reason : Union [ str , NoneType ] = None )","title":"reject"},{"location":"reference/yapapi/rest/market/#respond","text":"def respond ( self , props : dict , constraints : str ) -> str","title":"respond"},{"location":"reference/yapapi/rest/market/#subscription","text":"class Subscription ( api : ya_market . api . requestor_api . RequestorApi , subscription_id : str , _details : Union [ ya_market . models . demand . Demand , NoneType ] = None )","title":"Subscription"},{"location":"reference/yapapi/rest/market/#instance-variables_2","text":"details id","title":"Instance variables"},{"location":"reference/yapapi/rest/market/#methods_3","text":"","title":"Methods"},{"location":"reference/yapapi/rest/market/#close","text":"def close ( self )","title":"close"},{"location":"reference/yapapi/rest/market/#delete","text":"def delete ( self )","title":"delete"},{"location":"reference/yapapi/rest/market/#events","text":"def events ( self ) -> AsyncIterator [ yapapi . rest . market . OfferProposal ]","title":"events"},{"location":"reference/yapapi/rest/payment/","text":"Module yapapi.rest.payment Classes Allocation class Allocation ( _api : ya_payment . api . requestor_api . RequestorApi , id : str , amount : decimal . Decimal , expires : Union [ datetime . datetime , NoneType ] ) Payment reservation for task processing. Ancestors (in MRO) yapapi.rest.payment._Link Methods delete def delete ( self ) details def details ( self ) -> yapapi . rest . payment . AllocationDetails AllocationDetails class AllocationDetails ( spent_amount : decimal . Decimal , remaining_amount : decimal . Decimal ) AllocationDetails(spent_amount:decimal.Decimal, remaining_amount:decimal.Decimal) Invoice class Invoice ( _api : ya_payment . api . requestor_api . RequestorApi , _base : ya_payment . models . invoice . Invoice ) NOTE: This class is auto generated by OpenAPI Generator. Ref: https://openapi-generator.tech Do not edit the class manually. Ancestors (in MRO) ya_payment.models.invoice.Invoice Class variables attribute_map openapi_types Instance variables activity_ids Gets the activity_ids of this Invoice. # noqa: E501 :return: The activity_ids of this Invoice. # noqa: E501 :rtype: list[str] agreement_id Gets the agreement_id of this Invoice. # noqa: E501 :return: The agreement_id of this Invoice. # noqa: E501 :rtype: str amount Gets the amount of this Invoice. # noqa: E501 :return: The amount of this Invoice. # noqa: E501 :rtype: str invoice_id Gets the invoice_id of this Invoice. # noqa: E501 :return: The invoice_id of this Invoice. # noqa: E501 :rtype: str issuer_id Gets the issuer_id of this Invoice. # noqa: E501 :return: The issuer_id of this Invoice. # noqa: E501 :rtype: str last_debit_note_id Gets the last_debit_note_id of this Invoice. # noqa: E501 :return: The last_debit_note_id of this Invoice. # noqa: E501 :rtype: str payee_addr Gets the payee_addr of this Invoice. # noqa: E501 :return: The payee_addr of this Invoice. # noqa: E501 :rtype: str payer_addr Gets the payer_addr of this Invoice. # noqa: E501 :return: The payer_addr of this Invoice. # noqa: E501 :rtype: str payment_due_date Gets the payment_due_date of this Invoice. # noqa: E501 :return: The payment_due_date of this Invoice. # noqa: E501 :rtype: datetime recipient_id Gets the recipient_id of this Invoice. # noqa: E501 :return: The recipient_id of this Invoice. # noqa: E501 :rtype: str status Gets the status of this Invoice. # noqa: E501 :return: The status of this Invoice. # noqa: E501 :rtype: InvoiceStatus timestamp Gets the timestamp of this Invoice. # noqa: E501 :return: The timestamp of this Invoice. # noqa: E501 :rtype: datetime Methods accept def accept ( self , * , amount : Union [ decimal . Decimal , str ], allocation : 'Allocation' ) to_dict def to_dict ( self ) Returns the model properties as a dict to_str def to_str ( self ) Returns the string representation of the model InvoiceStatus class InvoiceStatus ( local_vars_configuration = None ) NOTE: This class is auto generated by OpenAPI Generator. Ref: https://openapi-generator.tech Do not edit the class manually. Class variables ACCEPTED CANCELLED FAILED ISSUED RECEIVED REJECTED SETTLED allowable_values Attributes: openapi_types (dict): The key is attribute name and the value is attribute type. attribute_map (dict): The key is attribute name and the value is json key in definition. attribute_map openapi_types Methods to_dict def to_dict ( self ) Returns the model properties as a dict to_str def to_str ( self ) Returns the string representation of the model Payment class Payment ( api_client : ya_payment . api_client . ApiClient ) Methods allocation def allocation ( self , allocation_id : str ) -> yapapi . rest . payment . Allocation allocations def allocations ( self ) -> AsyncIterator [ yapapi . rest . payment . Allocation ] Lists all active allocations. Example: Listing all active allocations from yapapi import rest async def list_allocations ( payment_api : rest . Payment ): async for allocation in payment_api . allocations (): print ( f '''allocation: {allocation.id} amount={allocation.amount}, expires={allocation.expires}''' ) incoming_invoices def incoming_invoices ( self ) -> AsyncIterator [ yapapi . rest . payment . Invoice ] invoice def invoice ( self , invoice_id : str ) -> yapapi . rest . payment . Invoice invoices def invoices ( self ) -> AsyncIterator [ yapapi . rest . payment . Invoice ] new_allocation def new_allocation ( self , amount : decimal . Decimal , * , expires : Union [ datetime . datetime , NoneType ] = None , make_deposit : bool = False ) -> yapapi . rest . resource . ResourceCtx Creates new allocation. amount : Allocation amount. expires : expiration timestamp. by default 30 minutes from now. make_deposit : (unimplemented).","title":"Payment"},{"location":"reference/yapapi/rest/payment/#module-yapapirestpayment","text":"","title":"Module yapapi.rest.payment"},{"location":"reference/yapapi/rest/payment/#classes","text":"","title":"Classes"},{"location":"reference/yapapi/rest/payment/#allocation","text":"class Allocation ( _api : ya_payment . api . requestor_api . RequestorApi , id : str , amount : decimal . Decimal , expires : Union [ datetime . datetime , NoneType ] ) Payment reservation for task processing.","title":"Allocation"},{"location":"reference/yapapi/rest/payment/#ancestors-in-mro","text":"yapapi.rest.payment._Link","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/rest/payment/#methods","text":"","title":"Methods"},{"location":"reference/yapapi/rest/payment/#delete","text":"def delete ( self )","title":"delete"},{"location":"reference/yapapi/rest/payment/#details","text":"def details ( self ) -> yapapi . rest . payment . AllocationDetails","title":"details"},{"location":"reference/yapapi/rest/payment/#allocationdetails","text":"class AllocationDetails ( spent_amount : decimal . Decimal , remaining_amount : decimal . Decimal ) AllocationDetails(spent_amount:decimal.Decimal, remaining_amount:decimal.Decimal)","title":"AllocationDetails"},{"location":"reference/yapapi/rest/payment/#invoice","text":"class Invoice ( _api : ya_payment . api . requestor_api . RequestorApi , _base : ya_payment . models . invoice . Invoice ) NOTE: This class is auto generated by OpenAPI Generator. Ref: https://openapi-generator.tech Do not edit the class manually.","title":"Invoice"},{"location":"reference/yapapi/rest/payment/#ancestors-in-mro_1","text":"ya_payment.models.invoice.Invoice","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/rest/payment/#class-variables","text":"attribute_map openapi_types","title":"Class variables"},{"location":"reference/yapapi/rest/payment/#instance-variables","text":"activity_ids Gets the activity_ids of this Invoice. # noqa: E501 :return: The activity_ids of this Invoice. # noqa: E501 :rtype: list[str] agreement_id Gets the agreement_id of this Invoice. # noqa: E501 :return: The agreement_id of this Invoice. # noqa: E501 :rtype: str amount Gets the amount of this Invoice. # noqa: E501 :return: The amount of this Invoice. # noqa: E501 :rtype: str invoice_id Gets the invoice_id of this Invoice. # noqa: E501 :return: The invoice_id of this Invoice. # noqa: E501 :rtype: str issuer_id Gets the issuer_id of this Invoice. # noqa: E501 :return: The issuer_id of this Invoice. # noqa: E501 :rtype: str last_debit_note_id Gets the last_debit_note_id of this Invoice. # noqa: E501 :return: The last_debit_note_id of this Invoice. # noqa: E501 :rtype: str payee_addr Gets the payee_addr of this Invoice. # noqa: E501 :return: The payee_addr of this Invoice. # noqa: E501 :rtype: str payer_addr Gets the payer_addr of this Invoice. # noqa: E501 :return: The payer_addr of this Invoice. # noqa: E501 :rtype: str payment_due_date Gets the payment_due_date of this Invoice. # noqa: E501 :return: The payment_due_date of this Invoice. # noqa: E501 :rtype: datetime recipient_id Gets the recipient_id of this Invoice. # noqa: E501 :return: The recipient_id of this Invoice. # noqa: E501 :rtype: str status Gets the status of this Invoice. # noqa: E501 :return: The status of this Invoice. # noqa: E501 :rtype: InvoiceStatus timestamp Gets the timestamp of this Invoice. # noqa: E501 :return: The timestamp of this Invoice. # noqa: E501 :rtype: datetime","title":"Instance variables"},{"location":"reference/yapapi/rest/payment/#methods_1","text":"","title":"Methods"},{"location":"reference/yapapi/rest/payment/#accept","text":"def accept ( self , * , amount : Union [ decimal . Decimal , str ], allocation : 'Allocation' )","title":"accept"},{"location":"reference/yapapi/rest/payment/#to_dict","text":"def to_dict ( self ) Returns the model properties as a dict","title":"to_dict"},{"location":"reference/yapapi/rest/payment/#to_str","text":"def to_str ( self ) Returns the string representation of the model","title":"to_str"},{"location":"reference/yapapi/rest/payment/#invoicestatus","text":"class InvoiceStatus ( local_vars_configuration = None ) NOTE: This class is auto generated by OpenAPI Generator. Ref: https://openapi-generator.tech Do not edit the class manually.","title":"InvoiceStatus"},{"location":"reference/yapapi/rest/payment/#class-variables_1","text":"ACCEPTED CANCELLED FAILED ISSUED RECEIVED REJECTED SETTLED allowable_values Attributes: openapi_types (dict): The key is attribute name and the value is attribute type. attribute_map (dict): The key is attribute name and the value is json key in definition. attribute_map openapi_types","title":"Class variables"},{"location":"reference/yapapi/rest/payment/#methods_2","text":"","title":"Methods"},{"location":"reference/yapapi/rest/payment/#to_dict_1","text":"def to_dict ( self ) Returns the model properties as a dict","title":"to_dict"},{"location":"reference/yapapi/rest/payment/#to_str_1","text":"def to_str ( self ) Returns the string representation of the model","title":"to_str"},{"location":"reference/yapapi/rest/payment/#payment","text":"class Payment ( api_client : ya_payment . api_client . ApiClient )","title":"Payment"},{"location":"reference/yapapi/rest/payment/#methods_3","text":"","title":"Methods"},{"location":"reference/yapapi/rest/payment/#allocation_1","text":"def allocation ( self , allocation_id : str ) -> yapapi . rest . payment . Allocation","title":"allocation"},{"location":"reference/yapapi/rest/payment/#allocations","text":"def allocations ( self ) -> AsyncIterator [ yapapi . rest . payment . Allocation ] Lists all active allocations. Example: Listing all active allocations from yapapi import rest async def list_allocations ( payment_api : rest . Payment ): async for allocation in payment_api . allocations (): print ( f '''allocation: {allocation.id} amount={allocation.amount}, expires={allocation.expires}''' )","title":"allocations"},{"location":"reference/yapapi/rest/payment/#incoming_invoices","text":"def incoming_invoices ( self ) -> AsyncIterator [ yapapi . rest . payment . Invoice ]","title":"incoming_invoices"},{"location":"reference/yapapi/rest/payment/#invoice_1","text":"def invoice ( self , invoice_id : str ) -> yapapi . rest . payment . Invoice","title":"invoice"},{"location":"reference/yapapi/rest/payment/#invoices","text":"def invoices ( self ) -> AsyncIterator [ yapapi . rest . payment . Invoice ]","title":"invoices"},{"location":"reference/yapapi/rest/payment/#new_allocation","text":"def new_allocation ( self , amount : decimal . Decimal , * , expires : Union [ datetime . datetime , NoneType ] = None , make_deposit : bool = False ) -> yapapi . rest . resource . ResourceCtx Creates new allocation. amount : Allocation amount. expires : expiration timestamp. by default 30 minutes from now. make_deposit : (unimplemented).","title":"new_allocation"},{"location":"reference/yapapi/rest/resource/","text":"Module yapapi.rest.resource Classes ResourceCtx class ResourceCtx ( / , * args , ** kwargs ) Abstract base class for generic types. A generic type is typically declared by inheriting from this class parameterized with one or more type variables. For example, a generic mapping type might be defined as:: class Mapping(Generic[KT, VT]): def getitem (self, key: KT) -> VT: ... # Etc. This class can then be used as follows:: def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT: try: return mapping[key] except KeyError: return default Ancestors (in MRO) typing.AsyncContextManager typing.Generic Descendants yapapi.rest.resource.ResourceCtx yapapi.rest.payment._AllocationTask Methods detach def detach ( self ) -> ~ _T","title":"Resource"},{"location":"reference/yapapi/rest/resource/#module-yapapirestresource","text":"","title":"Module yapapi.rest.resource"},{"location":"reference/yapapi/rest/resource/#classes","text":"","title":"Classes"},{"location":"reference/yapapi/rest/resource/#resourcectx","text":"class ResourceCtx ( / , * args , ** kwargs ) Abstract base class for generic types. A generic type is typically declared by inheriting from this class parameterized with one or more type variables. For example, a generic mapping type might be defined as:: class Mapping(Generic[KT, VT]): def getitem (self, key: KT) -> VT: ... # Etc. This class can then be used as follows:: def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT: try: return mapping[key] except KeyError: return default","title":"ResourceCtx"},{"location":"reference/yapapi/rest/resource/#ancestors-in-mro","text":"typing.AsyncContextManager typing.Generic","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/rest/resource/#descendants","text":"yapapi.rest.resource.ResourceCtx yapapi.rest.payment._AllocationTask","title":"Descendants"},{"location":"reference/yapapi/rest/resource/#methods","text":"","title":"Methods"},{"location":"reference/yapapi/rest/resource/#detach","text":"def detach ( self ) -> ~ _T","title":"detach"},{"location":"reference/yapapi/runner/","text":"Module yapapi.runner Sub-modules yapapi.runner.ctx yapapi.runner.events yapapi.runner.vm Variables CFF_DEFAULT_PRICE_FOR_COUNTER CFG_INVOICE_TIMEOUT SCORE_NEUTRAL SCORE_REJECTED SCORE_TRUSTED TaskData TaskEvents TaskResult Classes DummyMS class DummyMS ( max_for_counter : Mapping [ yapapi . props . com . Counter , decimal . Decimal ] = mappingproxy ({ < Counter . TIME : 'golem.usage.duration_sec' > : Decimal ( '0.002' ), < Counter . CPU : 'golem.usage.cpu_sec' > : Decimal ( '0.020' )}), max_fixed : decimal . Decimal = Decimal ( '0.05' ) ) DummyMS(max_for_counter:Mapping[yapapi.props.com.Counter, decimal.Decimal]=mappingproxy({ : Decimal('0.002'), : Decimal('0.020')}), max_fixed:decimal.Decimal=Decimal('0.05')) Ancestors (in MRO) yapapi.runner.MarketStrategy abc.ABC Class variables max_fixed max_for_counter Methods decorate_demand def decorate_demand ( self , demand : yapapi . props . builder . DemandBuilder ) -> None score_offer def score_offer ( self , offer : yapapi . rest . market . OfferProposal ) -> float Engine class Engine ( * , package : 'Package' , max_workers : int = 5 , timeout : datetime . timedelta = datetime . timedelta ( 0 , 300 ), budget : Union [ float , decimal . Decimal ], strategy : yapapi . runner . MarketStrategy = DummyMS ( max_for_counter = mappingproxy ({ < Counter . TIME : 'golem.usage.duration_sec' > : Decimal ( '0.002' ), < Counter . CPU : 'golem.usage.cpu_sec' > : Decimal ( '0.020' )}), max_fixed = Decimal ( '0.05' )), subnet_tag : Union [ str , NoneType ] = None ) Abstract base class for generic types. A generic type is typically declared by inheriting from this class parameterized with one or more type variables. For example, a generic mapping type might be defined as:: class Mapping(Generic[KT, VT]): def getitem (self, key: KT) -> VT: ... # Etc. This class can then be used as follows:: def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT: try: return mapping[key] except KeyError: return default Ancestors (in MRO) typing.AsyncContextManager typing.Generic Methods map def map ( self , worker : Callable [[ yapapi . runner . ctx . WorkContext , AsyncIterator [ _ForwardRef ( 'Task' )]], AsyncIterator [ Tuple [ _ForwardRef ( 'Task' ), yapapi . runner . ctx . Work ]]], data , event_emitter : yapapi . runner . events . EventEmitter =< function log_event at 0x7f860e784730 > ) LeastExpensiveLinearPayuMS class LeastExpensiveLinearPayuMS ( expected_time_secs : int = 60 ) LeastExpensiveLinearPayuMS(expected_time_secs:int=60) Ancestors (in MRO) yapapi.runner.MarketStrategy abc.ABC Methods decorate_demand def decorate_demand ( self , demand : yapapi . props . builder . DemandBuilder ) -> None score_offer def score_offer ( self , offer : yapapi . rest . market . OfferProposal ) -> float MarketStrategy class MarketStrategy ( / , * args , ** kwargs ) Abstract market strategy Ancestors (in MRO) abc.ABC Descendants yapapi.runner.DummyMS yapapi.runner.LeastExpensiveLinearPayuMS Methods decorate_demand def decorate_demand ( self , demand : yapapi . props . builder . DemandBuilder ) -> None score_offer def score_offer ( self , offer : yapapi . rest . market . OfferProposal ) -> float Package class Package ( / , * args , ** kwargs ) Helper class that provides a standard way to create an ABC using inheritance. Ancestors (in MRO) abc.ABC Descendants yapapi.runner.vm._VmPackage Methods decorate_demand def decorate_demand ( self , demand : yapapi . props . builder . DemandBuilder ) resolve_url def resolve_url ( self ) -> str Task class Task ( data : ~ TaskData , * , expires : Union [ datetime . datetime , NoneType ] = None , timeout : Union [ datetime . timedelta , NoneType ] = None ) Abstract base class for generic types. A generic type is typically declared by inheriting from this class parameterized with one or more type variables. For example, a generic mapping type might be defined as:: class Mapping(Generic[KT, VT]): def getitem (self, key: KT) -> VT: ... # Etc. This class can then be used as follows:: def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT: try: return mapping[key] except KeyError: return default Ancestors (in MRO) typing.Generic Instance variables data expires output Methods accept_task def accept_task ( self , result : Union [ ~ TaskResult , NoneType ] = None ) reject_task def reject_task ( self , reason : Union [ str , NoneType ] = None ) TaskStatus class TaskStatus ( / , * args , ** kwargs ) An enumeration. Ancestors (in MRO) enum.Enum Class variables ACCEPTED REJECTED RUNNING WAITING name value","title":"Index"},{"location":"reference/yapapi/runner/#module-yapapirunner","text":"","title":"Module yapapi.runner"},{"location":"reference/yapapi/runner/#sub-modules","text":"yapapi.runner.ctx yapapi.runner.events yapapi.runner.vm","title":"Sub-modules"},{"location":"reference/yapapi/runner/#variables","text":"CFF_DEFAULT_PRICE_FOR_COUNTER CFG_INVOICE_TIMEOUT SCORE_NEUTRAL SCORE_REJECTED SCORE_TRUSTED TaskData TaskEvents TaskResult","title":"Variables"},{"location":"reference/yapapi/runner/#classes","text":"","title":"Classes"},{"location":"reference/yapapi/runner/#dummyms","text":"class DummyMS ( max_for_counter : Mapping [ yapapi . props . com . Counter , decimal . Decimal ] = mappingproxy ({ < Counter . TIME : 'golem.usage.duration_sec' > : Decimal ( '0.002' ), < Counter . CPU : 'golem.usage.cpu_sec' > : Decimal ( '0.020' )}), max_fixed : decimal . Decimal = Decimal ( '0.05' ) ) DummyMS(max_for_counter:Mapping[yapapi.props.com.Counter, decimal.Decimal]=mappingproxy({ : Decimal('0.002'), : Decimal('0.020')}), max_fixed:decimal.Decimal=Decimal('0.05'))","title":"DummyMS"},{"location":"reference/yapapi/runner/#ancestors-in-mro","text":"yapapi.runner.MarketStrategy abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/runner/#class-variables","text":"max_fixed max_for_counter","title":"Class variables"},{"location":"reference/yapapi/runner/#methods","text":"","title":"Methods"},{"location":"reference/yapapi/runner/#decorate_demand","text":"def decorate_demand ( self , demand : yapapi . props . builder . DemandBuilder ) -> None","title":"decorate_demand"},{"location":"reference/yapapi/runner/#score_offer","text":"def score_offer ( self , offer : yapapi . rest . market . OfferProposal ) -> float","title":"score_offer"},{"location":"reference/yapapi/runner/#engine","text":"class Engine ( * , package : 'Package' , max_workers : int = 5 , timeout : datetime . timedelta = datetime . timedelta ( 0 , 300 ), budget : Union [ float , decimal . Decimal ], strategy : yapapi . runner . MarketStrategy = DummyMS ( max_for_counter = mappingproxy ({ < Counter . TIME : 'golem.usage.duration_sec' > : Decimal ( '0.002' ), < Counter . CPU : 'golem.usage.cpu_sec' > : Decimal ( '0.020' )}), max_fixed = Decimal ( '0.05' )), subnet_tag : Union [ str , NoneType ] = None ) Abstract base class for generic types. A generic type is typically declared by inheriting from this class parameterized with one or more type variables. For example, a generic mapping type might be defined as:: class Mapping(Generic[KT, VT]): def getitem (self, key: KT) -> VT: ... # Etc. This class can then be used as follows:: def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT: try: return mapping[key] except KeyError: return default","title":"Engine"},{"location":"reference/yapapi/runner/#ancestors-in-mro_1","text":"typing.AsyncContextManager typing.Generic","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/runner/#methods_1","text":"","title":"Methods"},{"location":"reference/yapapi/runner/#map","text":"def map ( self , worker : Callable [[ yapapi . runner . ctx . WorkContext , AsyncIterator [ _ForwardRef ( 'Task' )]], AsyncIterator [ Tuple [ _ForwardRef ( 'Task' ), yapapi . runner . ctx . Work ]]], data , event_emitter : yapapi . runner . events . EventEmitter =< function log_event at 0x7f860e784730 > )","title":"map"},{"location":"reference/yapapi/runner/#leastexpensivelinearpayums","text":"class LeastExpensiveLinearPayuMS ( expected_time_secs : int = 60 ) LeastExpensiveLinearPayuMS(expected_time_secs:int=60)","title":"LeastExpensiveLinearPayuMS"},{"location":"reference/yapapi/runner/#ancestors-in-mro_2","text":"yapapi.runner.MarketStrategy abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/runner/#methods_2","text":"","title":"Methods"},{"location":"reference/yapapi/runner/#decorate_demand_1","text":"def decorate_demand ( self , demand : yapapi . props . builder . DemandBuilder ) -> None","title":"decorate_demand"},{"location":"reference/yapapi/runner/#score_offer_1","text":"def score_offer ( self , offer : yapapi . rest . market . OfferProposal ) -> float","title":"score_offer"},{"location":"reference/yapapi/runner/#marketstrategy","text":"class MarketStrategy ( / , * args , ** kwargs ) Abstract market strategy","title":"MarketStrategy"},{"location":"reference/yapapi/runner/#ancestors-in-mro_3","text":"abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/runner/#descendants","text":"yapapi.runner.DummyMS yapapi.runner.LeastExpensiveLinearPayuMS","title":"Descendants"},{"location":"reference/yapapi/runner/#methods_3","text":"","title":"Methods"},{"location":"reference/yapapi/runner/#decorate_demand_2","text":"def decorate_demand ( self , demand : yapapi . props . builder . DemandBuilder ) -> None","title":"decorate_demand"},{"location":"reference/yapapi/runner/#score_offer_2","text":"def score_offer ( self , offer : yapapi . rest . market . OfferProposal ) -> float","title":"score_offer"},{"location":"reference/yapapi/runner/#package","text":"class Package ( / , * args , ** kwargs ) Helper class that provides a standard way to create an ABC using inheritance.","title":"Package"},{"location":"reference/yapapi/runner/#ancestors-in-mro_4","text":"abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/runner/#descendants_1","text":"yapapi.runner.vm._VmPackage","title":"Descendants"},{"location":"reference/yapapi/runner/#methods_4","text":"","title":"Methods"},{"location":"reference/yapapi/runner/#decorate_demand_3","text":"def decorate_demand ( self , demand : yapapi . props . builder . DemandBuilder )","title":"decorate_demand"},{"location":"reference/yapapi/runner/#resolve_url","text":"def resolve_url ( self ) -> str","title":"resolve_url"},{"location":"reference/yapapi/runner/#task","text":"class Task ( data : ~ TaskData , * , expires : Union [ datetime . datetime , NoneType ] = None , timeout : Union [ datetime . timedelta , NoneType ] = None ) Abstract base class for generic types. A generic type is typically declared by inheriting from this class parameterized with one or more type variables. For example, a generic mapping type might be defined as:: class Mapping(Generic[KT, VT]): def getitem (self, key: KT) -> VT: ... # Etc. This class can then be used as follows:: def lookup_name(mapping: Mapping[KT, VT], key: KT, default: VT) -> VT: try: return mapping[key] except KeyError: return default","title":"Task"},{"location":"reference/yapapi/runner/#ancestors-in-mro_5","text":"typing.Generic","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/runner/#instance-variables","text":"data expires output","title":"Instance variables"},{"location":"reference/yapapi/runner/#methods_5","text":"","title":"Methods"},{"location":"reference/yapapi/runner/#accept_task","text":"def accept_task ( self , result : Union [ ~ TaskResult , NoneType ] = None )","title":"accept_task"},{"location":"reference/yapapi/runner/#reject_task","text":"def reject_task ( self , reason : Union [ str , NoneType ] = None )","title":"reject_task"},{"location":"reference/yapapi/runner/#taskstatus","text":"class TaskStatus ( / , * args , ** kwargs ) An enumeration.","title":"TaskStatus"},{"location":"reference/yapapi/runner/#ancestors-in-mro_6","text":"enum.Enum","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/runner/#class-variables_1","text":"ACCEPTED REJECTED RUNNING WAITING name value","title":"Class variables"},{"location":"reference/yapapi/runner/ctx/","text":"Module yapapi.runner.ctx Variables DownloadEvents Classes CommandContainer class CommandContainer ( ) Methods commands def commands ( self ) Work class Work ( / , * args , ** kwargs ) Helper class that provides a standard way to create an ABC using inheritance. Ancestors (in MRO) abc.ABC Descendants yapapi.runner.ctx._InitStep yapapi.runner.ctx._SendWork yapapi.runner.ctx._Run yapapi.runner.ctx._RecvFile yapapi.runner.ctx._Steps Methods post def post ( self ) prepare def prepare ( self ) register def register ( self , commands : yapapi . runner . ctx . CommandContainer ) Register a virtual subclass of an ABC. Returns the subclass, to allow usage as a class decorator. WorkContext class WorkContext ( ctx_id : str , storage : yapapi . storage . StorageProvider , emitter : Union [ yapapi . runner . events . EventEmitter [ typing_extensions . Literal [ < EventType . DOWNLOAD_STARTED : 23 > , < EventType . DOWNLOAD_FINISHED : 24 > ]], NoneType ] = None ) Methods begin def begin ( self ) commit def commit ( self , task : 'Task' ) -> Tuple [ _ForwardRef ( 'Task' ), yapapi . runner . ctx . Work ] download_file def download_file ( self , src_path : str , dst_path : str ) log def log ( self , * args ) run def run ( self , cmd : str , * args : Iterable [ str ], env : Union [ Dict [ str , str ], NoneType ] = None ) send_file def send_file ( self , src_path : str , dst_path : str ) send_json def send_json ( self , json_path : str , data : dict )","title":"Ctx"},{"location":"reference/yapapi/runner/ctx/#module-yapapirunnerctx","text":"","title":"Module yapapi.runner.ctx"},{"location":"reference/yapapi/runner/ctx/#variables","text":"DownloadEvents","title":"Variables"},{"location":"reference/yapapi/runner/ctx/#classes","text":"","title":"Classes"},{"location":"reference/yapapi/runner/ctx/#commandcontainer","text":"class CommandContainer ( )","title":"CommandContainer"},{"location":"reference/yapapi/runner/ctx/#methods","text":"","title":"Methods"},{"location":"reference/yapapi/runner/ctx/#commands","text":"def commands ( self )","title":"commands"},{"location":"reference/yapapi/runner/ctx/#work","text":"class Work ( / , * args , ** kwargs ) Helper class that provides a standard way to create an ABC using inheritance.","title":"Work"},{"location":"reference/yapapi/runner/ctx/#ancestors-in-mro","text":"abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/runner/ctx/#descendants","text":"yapapi.runner.ctx._InitStep yapapi.runner.ctx._SendWork yapapi.runner.ctx._Run yapapi.runner.ctx._RecvFile yapapi.runner.ctx._Steps","title":"Descendants"},{"location":"reference/yapapi/runner/ctx/#methods_1","text":"","title":"Methods"},{"location":"reference/yapapi/runner/ctx/#post","text":"def post ( self )","title":"post"},{"location":"reference/yapapi/runner/ctx/#prepare","text":"def prepare ( self )","title":"prepare"},{"location":"reference/yapapi/runner/ctx/#register","text":"def register ( self , commands : yapapi . runner . ctx . CommandContainer ) Register a virtual subclass of an ABC. Returns the subclass, to allow usage as a class decorator.","title":"register"},{"location":"reference/yapapi/runner/ctx/#workcontext","text":"class WorkContext ( ctx_id : str , storage : yapapi . storage . StorageProvider , emitter : Union [ yapapi . runner . events . EventEmitter [ typing_extensions . Literal [ < EventType . DOWNLOAD_STARTED : 23 > , < EventType . DOWNLOAD_FINISHED : 24 > ]], NoneType ] = None )","title":"WorkContext"},{"location":"reference/yapapi/runner/ctx/#methods_2","text":"","title":"Methods"},{"location":"reference/yapapi/runner/ctx/#begin","text":"def begin ( self )","title":"begin"},{"location":"reference/yapapi/runner/ctx/#commit","text":"def commit ( self , task : 'Task' ) -> Tuple [ _ForwardRef ( 'Task' ), yapapi . runner . ctx . Work ]","title":"commit"},{"location":"reference/yapapi/runner/ctx/#download_file","text":"def download_file ( self , src_path : str , dst_path : str )","title":"download_file"},{"location":"reference/yapapi/runner/ctx/#log","text":"def log ( self , * args )","title":"log"},{"location":"reference/yapapi/runner/ctx/#run","text":"def run ( self , cmd : str , * args : Iterable [ str ], env : Union [ Dict [ str , str ], NoneType ] = None )","title":"run"},{"location":"reference/yapapi/runner/ctx/#send_file","text":"def send_file ( self , src_path : str , dst_path : str )","title":"send_file"},{"location":"reference/yapapi/runner/ctx/#send_json","text":"def send_json ( self , json_path : str , data : dict )","title":"send_json"},{"location":"reference/yapapi/runner/events/","text":"Module yapapi.runner.events Representing and logging events in Golem computation. Variables E ResourceId Functions log_event def log_event ( event_type : yapapi . runner . events . EventType , resource_id : Union [ int , str , NoneType ] = None , ** kwargs : Any ) -> None Log an event. Classes AsyncEventBuffer class AsyncEventBuffer ( wrapped_emitter : yapapi . runner . events . EventEmitter ) Wraps a given event emitter to provide buffering. The emitter method is an event emitter that buffers the events and emits them asynchronously later using the wrapped emitter. Ancestors (in MRO) typing.AsyncContextManager typing.Generic Methods emitter def emitter ( self , event_type : yapapi . runner . events . EventType , resource_id : Union [ int , str , NoneType ] = None , ** kwargs : Any ) -> None Buffer the event to be emitted asynchronously by the wrapped emitter. ET class ET ( / , * args , ** kwargs ) Types of computation events. Ancestors (in MRO) enum.Enum Class variables ACTIVITY_CREATED ACTIVITY_CREATE_FAILED AGREEMENT_CONFIRMED AGREEMENT_CREATED AGREEMENT_REJECTED BATCH_DONE BATCH_GET_RESULTS BATCH_SENT BATCH_STEP DOWNLOAD_FINISHED DOWNLOAD_STARTED PAYMENT_ACCEPTED PAYMENT_PREPARED PAYMENT_QUEUED PROPOSAL_BUFFERED PROPOSAL_FAILED PROPOSAL_RECEIVED PROPOSAL_REJECTED PROPOSAL_RESPONDED SUBSCRIPTION_COLLECT_FAILED SUBSCRIPTION_CREATED SUBSCRIPTION_FAILED TASK_ACCEPTED TASK_REJECTED WORKER_CREATED WORKER_DONE WORKER_GET_WORK name value EventEmitter class EventEmitter ( * args , ** kwargs ) A protocol for callables that can emit events of type E . Ancestors (in MRO) typing_extensions.Protocol Descendants yapapi.runner.events.EventEmitter yapapi.runner.events.EventEmitter yapapi.runner.events.EventEmitter EventType class EventType ( / , * args , ** kwargs ) Types of computation events. Ancestors (in MRO) enum.Enum Class variables ACTIVITY_CREATED ACTIVITY_CREATE_FAILED AGREEMENT_CONFIRMED AGREEMENT_CREATED AGREEMENT_REJECTED BATCH_DONE BATCH_GET_RESULTS BATCH_SENT BATCH_STEP DOWNLOAD_FINISHED DOWNLOAD_STARTED PAYMENT_ACCEPTED PAYMENT_PREPARED PAYMENT_QUEUED PROPOSAL_BUFFERED PROPOSAL_FAILED PROPOSAL_RECEIVED PROPOSAL_REJECTED PROPOSAL_RESPONDED SUBSCRIPTION_COLLECT_FAILED SUBSCRIPTION_CREATED SUBSCRIPTION_FAILED TASK_ACCEPTED TASK_REJECTED WORKER_CREATED WORKER_DONE WORKER_GET_WORK name value","title":"Events"},{"location":"reference/yapapi/runner/events/#module-yapapirunnerevents","text":"Representing and logging events in Golem computation.","title":"Module yapapi.runner.events"},{"location":"reference/yapapi/runner/events/#variables","text":"E ResourceId","title":"Variables"},{"location":"reference/yapapi/runner/events/#functions","text":"","title":"Functions"},{"location":"reference/yapapi/runner/events/#log_event","text":"def log_event ( event_type : yapapi . runner . events . EventType , resource_id : Union [ int , str , NoneType ] = None , ** kwargs : Any ) -> None Log an event.","title":"log_event"},{"location":"reference/yapapi/runner/events/#classes","text":"","title":"Classes"},{"location":"reference/yapapi/runner/events/#asynceventbuffer","text":"class AsyncEventBuffer ( wrapped_emitter : yapapi . runner . events . EventEmitter ) Wraps a given event emitter to provide buffering. The emitter method is an event emitter that buffers the events and emits them asynchronously later using the wrapped emitter.","title":"AsyncEventBuffer"},{"location":"reference/yapapi/runner/events/#ancestors-in-mro","text":"typing.AsyncContextManager typing.Generic","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/runner/events/#methods","text":"","title":"Methods"},{"location":"reference/yapapi/runner/events/#emitter","text":"def emitter ( self , event_type : yapapi . runner . events . EventType , resource_id : Union [ int , str , NoneType ] = None , ** kwargs : Any ) -> None Buffer the event to be emitted asynchronously by the wrapped emitter.","title":"emitter"},{"location":"reference/yapapi/runner/events/#et","text":"class ET ( / , * args , ** kwargs ) Types of computation events.","title":"ET"},{"location":"reference/yapapi/runner/events/#ancestors-in-mro_1","text":"enum.Enum","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/runner/events/#class-variables","text":"ACTIVITY_CREATED ACTIVITY_CREATE_FAILED AGREEMENT_CONFIRMED AGREEMENT_CREATED AGREEMENT_REJECTED BATCH_DONE BATCH_GET_RESULTS BATCH_SENT BATCH_STEP DOWNLOAD_FINISHED DOWNLOAD_STARTED PAYMENT_ACCEPTED PAYMENT_PREPARED PAYMENT_QUEUED PROPOSAL_BUFFERED PROPOSAL_FAILED PROPOSAL_RECEIVED PROPOSAL_REJECTED PROPOSAL_RESPONDED SUBSCRIPTION_COLLECT_FAILED SUBSCRIPTION_CREATED SUBSCRIPTION_FAILED TASK_ACCEPTED TASK_REJECTED WORKER_CREATED WORKER_DONE WORKER_GET_WORK name value","title":"Class variables"},{"location":"reference/yapapi/runner/events/#eventemitter","text":"class EventEmitter ( * args , ** kwargs ) A protocol for callables that can emit events of type E .","title":"EventEmitter"},{"location":"reference/yapapi/runner/events/#ancestors-in-mro_2","text":"typing_extensions.Protocol","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/runner/events/#descendants","text":"yapapi.runner.events.EventEmitter yapapi.runner.events.EventEmitter yapapi.runner.events.EventEmitter","title":"Descendants"},{"location":"reference/yapapi/runner/events/#eventtype","text":"class EventType ( / , * args , ** kwargs ) Types of computation events.","title":"EventType"},{"location":"reference/yapapi/runner/events/#ancestors-in-mro_3","text":"enum.Enum","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/runner/events/#class-variables_1","text":"ACTIVITY_CREATED ACTIVITY_CREATE_FAILED AGREEMENT_CONFIRMED AGREEMENT_CREATED AGREEMENT_REJECTED BATCH_DONE BATCH_GET_RESULTS BATCH_SENT BATCH_STEP DOWNLOAD_FINISHED DOWNLOAD_STARTED PAYMENT_ACCEPTED PAYMENT_PREPARED PAYMENT_QUEUED PROPOSAL_BUFFERED PROPOSAL_FAILED PROPOSAL_RECEIVED PROPOSAL_REJECTED PROPOSAL_RESPONDED SUBSCRIPTION_COLLECT_FAILED SUBSCRIPTION_CREATED SUBSCRIPTION_FAILED TASK_ACCEPTED TASK_REJECTED WORKER_CREATED WORKER_DONE WORKER_GET_WORK name value","title":"Class variables"},{"location":"reference/yapapi/runner/vm/","text":"Module yapapi.runner.vm Functions repo def repo ( * , image_hash : str , min_mem_gib : float = 0.5 , min_storage_gib : float = 2.0 ) -> yapapi . runner . Package Builds reference to application package. image_hash : finds package by its contents hash. min_mem_gib : minimal memory required to execute application code. min_storage_gib minimal disk storage to execute tasks.","title":"Vm"},{"location":"reference/yapapi/runner/vm/#module-yapapirunnervm","text":"","title":"Module yapapi.runner.vm"},{"location":"reference/yapapi/runner/vm/#functions","text":"","title":"Functions"},{"location":"reference/yapapi/runner/vm/#repo","text":"def repo ( * , image_hash : str , min_mem_gib : float = 0.5 , min_storage_gib : float = 2.0 ) -> yapapi . runner . Package Builds reference to application package. image_hash : finds package by its contents hash. min_mem_gib : minimal memory required to execute application code. min_storage_gib minimal disk storage to execute tasks.","title":"repo"},{"location":"reference/yapapi/storage/","text":"Module yapapi.storage Storage models. Sub-modules yapapi.storage.gftp yapapi.storage.webdav Variables AsyncReader Classes ComposedStorageProvider class ComposedStorageProvider ( input_storage : yapapi . storage . InputStorageProvider , output_storage : yapapi . storage . OutputStorageProvider ) Helper class that provides a standard way to create an ABC using inheritance. Ancestors (in MRO) yapapi.storage.StorageProvider yapapi.storage.InputStorageProvider yapapi.storage.OutputStorageProvider abc.ABC Methods new_destination def new_destination ( self , destination_file : Union [ os . PathLike , NoneType ] = None ) -> yapapi . storage . Destination Creates slot for receiving file. Parameters destination_file: Optional hint where received data should be placed. upload_bytes def upload_bytes ( self , data : bytes ) -> yapapi . storage . Source upload_file def upload_file ( self , path : os . PathLike ) -> yapapi . storage . Source upload_stream def upload_stream ( self , length : int , stream : AsyncIterator [ bytes ] ) -> yapapi . storage . Source Content class Content ( / , * args , ** kwargs ) Content(length, stream) Ancestors (in MRO) builtins.tuple Static methods from_reader def from_reader ( length : int , s : Union [ asyncio . streams . StreamReader , aiohttp . streams . StreamReader ] ) Instance variables length Alias for field number 0 stream Alias for field number 1 Methods count def count ( ... ) T.count(value) -> integer -- return number of occurrences of value index def index ( ... ) T.index(value, [start, [stop]]) -> integer -- return first index of value. Raises ValueError if the value is not present. Destination class Destination ( / , * args , ** kwargs ) Helper class that provides a standard way to create an ABC using inheritance. Ancestors (in MRO) abc.ABC Descendants yapapi.storage.gftp.GftpDestination yapapi.storage.webdav._DavDestination Instance variables upload_url Methods download_file def download_file ( self , destination_file : os . PathLike ) download_stream def download_stream ( self ) -> yapapi . storage . Content InputStorageProvider class InputStorageProvider ( / , * args , ** kwargs ) Helper class that provides a standard way to create an ABC using inheritance. Ancestors (in MRO) abc.ABC Descendants yapapi.storage.StorageProvider Methods upload_bytes def upload_bytes ( self , data : bytes ) -> yapapi . storage . Source upload_file def upload_file ( self , path : os . PathLike ) -> yapapi . storage . Source upload_stream def upload_stream ( self , length : int , stream : AsyncIterator [ bytes ] ) -> yapapi . storage . Source OutputStorageProvider class OutputStorageProvider ( / , * args , ** kwargs ) Helper class that provides a standard way to create an ABC using inheritance. Ancestors (in MRO) abc.ABC Descendants yapapi.storage.StorageProvider Methods new_destination def new_destination ( self , destination_file : Union [ os . PathLike , NoneType ] = None ) -> yapapi . storage . Destination Creates slot for receiving file. Parameters destination_file: Optional hint where received data should be placed. Source class Source ( / , * args , ** kwargs ) Helper class that provides a standard way to create an ABC using inheritance. Ancestors (in MRO) abc.ABC Descendants yapapi.storage.gftp.GftpSource yapapi.storage.webdav._DavSource Instance variables download_url Methods content_length def content_length ( self ) -> int StorageProvider class StorageProvider ( / , * args , ** kwargs ) Helper class that provides a standard way to create an ABC using inheritance. Ancestors (in MRO) yapapi.storage.InputStorageProvider yapapi.storage.OutputStorageProvider abc.ABC Descendants yapapi.storage.ComposedStorageProvider yapapi.storage.gftp.GftpProvider yapapi.storage.webdav.DavStorageProvider Methods new_destination def new_destination ( self , destination_file : Union [ os . PathLike , NoneType ] = None ) -> yapapi . storage . Destination Creates slot for receiving file. Parameters destination_file: Optional hint where received data should be placed. upload_bytes def upload_bytes ( self , data : bytes ) -> yapapi . storage . Source upload_file def upload_file ( self , path : os . PathLike ) -> yapapi . storage . Source upload_stream def upload_stream ( self , length : int , stream : AsyncIterator [ bytes ] ) -> yapapi . storage . Source","title":"Index"},{"location":"reference/yapapi/storage/#module-yapapistorage","text":"Storage models.","title":"Module yapapi.storage"},{"location":"reference/yapapi/storage/#sub-modules","text":"yapapi.storage.gftp yapapi.storage.webdav","title":"Sub-modules"},{"location":"reference/yapapi/storage/#variables","text":"AsyncReader","title":"Variables"},{"location":"reference/yapapi/storage/#classes","text":"","title":"Classes"},{"location":"reference/yapapi/storage/#composedstorageprovider","text":"class ComposedStorageProvider ( input_storage : yapapi . storage . InputStorageProvider , output_storage : yapapi . storage . OutputStorageProvider ) Helper class that provides a standard way to create an ABC using inheritance.","title":"ComposedStorageProvider"},{"location":"reference/yapapi/storage/#ancestors-in-mro","text":"yapapi.storage.StorageProvider yapapi.storage.InputStorageProvider yapapi.storage.OutputStorageProvider abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/storage/#methods","text":"","title":"Methods"},{"location":"reference/yapapi/storage/#new_destination","text":"def new_destination ( self , destination_file : Union [ os . PathLike , NoneType ] = None ) -> yapapi . storage . Destination Creates slot for receiving file.","title":"new_destination"},{"location":"reference/yapapi/storage/#parameters","text":"destination_file: Optional hint where received data should be placed.","title":"Parameters"},{"location":"reference/yapapi/storage/#upload_bytes","text":"def upload_bytes ( self , data : bytes ) -> yapapi . storage . Source","title":"upload_bytes"},{"location":"reference/yapapi/storage/#upload_file","text":"def upload_file ( self , path : os . PathLike ) -> yapapi . storage . Source","title":"upload_file"},{"location":"reference/yapapi/storage/#upload_stream","text":"def upload_stream ( self , length : int , stream : AsyncIterator [ bytes ] ) -> yapapi . storage . Source","title":"upload_stream"},{"location":"reference/yapapi/storage/#content","text":"class Content ( / , * args , ** kwargs ) Content(length, stream)","title":"Content"},{"location":"reference/yapapi/storage/#ancestors-in-mro_1","text":"builtins.tuple","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/storage/#static-methods","text":"","title":"Static methods"},{"location":"reference/yapapi/storage/#from_reader","text":"def from_reader ( length : int , s : Union [ asyncio . streams . StreamReader , aiohttp . streams . StreamReader ] )","title":"from_reader"},{"location":"reference/yapapi/storage/#instance-variables","text":"length Alias for field number 0 stream Alias for field number 1","title":"Instance variables"},{"location":"reference/yapapi/storage/#methods_1","text":"","title":"Methods"},{"location":"reference/yapapi/storage/#count","text":"def count ( ... ) T.count(value) -> integer -- return number of occurrences of value","title":"count"},{"location":"reference/yapapi/storage/#index","text":"def index ( ... ) T.index(value, [start, [stop]]) -> integer -- return first index of value. Raises ValueError if the value is not present.","title":"index"},{"location":"reference/yapapi/storage/#destination","text":"class Destination ( / , * args , ** kwargs ) Helper class that provides a standard way to create an ABC using inheritance.","title":"Destination"},{"location":"reference/yapapi/storage/#ancestors-in-mro_2","text":"abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/storage/#descendants","text":"yapapi.storage.gftp.GftpDestination yapapi.storage.webdav._DavDestination","title":"Descendants"},{"location":"reference/yapapi/storage/#instance-variables_1","text":"upload_url","title":"Instance variables"},{"location":"reference/yapapi/storage/#methods_2","text":"","title":"Methods"},{"location":"reference/yapapi/storage/#download_file","text":"def download_file ( self , destination_file : os . PathLike )","title":"download_file"},{"location":"reference/yapapi/storage/#download_stream","text":"def download_stream ( self ) -> yapapi . storage . Content","title":"download_stream"},{"location":"reference/yapapi/storage/#inputstorageprovider","text":"class InputStorageProvider ( / , * args , ** kwargs ) Helper class that provides a standard way to create an ABC using inheritance.","title":"InputStorageProvider"},{"location":"reference/yapapi/storage/#ancestors-in-mro_3","text":"abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/storage/#descendants_1","text":"yapapi.storage.StorageProvider","title":"Descendants"},{"location":"reference/yapapi/storage/#methods_3","text":"","title":"Methods"},{"location":"reference/yapapi/storage/#upload_bytes_1","text":"def upload_bytes ( self , data : bytes ) -> yapapi . storage . Source","title":"upload_bytes"},{"location":"reference/yapapi/storage/#upload_file_1","text":"def upload_file ( self , path : os . PathLike ) -> yapapi . storage . Source","title":"upload_file"},{"location":"reference/yapapi/storage/#upload_stream_1","text":"def upload_stream ( self , length : int , stream : AsyncIterator [ bytes ] ) -> yapapi . storage . Source","title":"upload_stream"},{"location":"reference/yapapi/storage/#outputstorageprovider","text":"class OutputStorageProvider ( / , * args , ** kwargs ) Helper class that provides a standard way to create an ABC using inheritance.","title":"OutputStorageProvider"},{"location":"reference/yapapi/storage/#ancestors-in-mro_4","text":"abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/storage/#descendants_2","text":"yapapi.storage.StorageProvider","title":"Descendants"},{"location":"reference/yapapi/storage/#methods_4","text":"","title":"Methods"},{"location":"reference/yapapi/storage/#new_destination_1","text":"def new_destination ( self , destination_file : Union [ os . PathLike , NoneType ] = None ) -> yapapi . storage . Destination Creates slot for receiving file.","title":"new_destination"},{"location":"reference/yapapi/storage/#parameters_1","text":"destination_file: Optional hint where received data should be placed.","title":"Parameters"},{"location":"reference/yapapi/storage/#source","text":"class Source ( / , * args , ** kwargs ) Helper class that provides a standard way to create an ABC using inheritance.","title":"Source"},{"location":"reference/yapapi/storage/#ancestors-in-mro_5","text":"abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/storage/#descendants_3","text":"yapapi.storage.gftp.GftpSource yapapi.storage.webdav._DavSource","title":"Descendants"},{"location":"reference/yapapi/storage/#instance-variables_2","text":"download_url","title":"Instance variables"},{"location":"reference/yapapi/storage/#methods_5","text":"","title":"Methods"},{"location":"reference/yapapi/storage/#content_length","text":"def content_length ( self ) -> int","title":"content_length"},{"location":"reference/yapapi/storage/#storageprovider","text":"class StorageProvider ( / , * args , ** kwargs ) Helper class that provides a standard way to create an ABC using inheritance.","title":"StorageProvider"},{"location":"reference/yapapi/storage/#ancestors-in-mro_6","text":"yapapi.storage.InputStorageProvider yapapi.storage.OutputStorageProvider abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/storage/#descendants_4","text":"yapapi.storage.ComposedStorageProvider yapapi.storage.gftp.GftpProvider yapapi.storage.webdav.DavStorageProvider","title":"Descendants"},{"location":"reference/yapapi/storage/#methods_6","text":"","title":"Methods"},{"location":"reference/yapapi/storage/#new_destination_2","text":"def new_destination ( self , destination_file : Union [ os . PathLike , NoneType ] = None ) -> yapapi . storage . Destination Creates slot for receiving file.","title":"new_destination"},{"location":"reference/yapapi/storage/#parameters_2","text":"destination_file: Optional hint where received data should be placed.","title":"Parameters"},{"location":"reference/yapapi/storage/#upload_bytes_2","text":"def upload_bytes ( self , data : bytes ) -> yapapi . storage . Source","title":"upload_bytes"},{"location":"reference/yapapi/storage/#upload_file_2","text":"def upload_file ( self , path : os . PathLike ) -> yapapi . storage . Source","title":"upload_file"},{"location":"reference/yapapi/storage/#upload_stream_2","text":"def upload_stream ( self , length : int , stream : AsyncIterator [ bytes ] ) -> yapapi . storage . Source","title":"upload_stream"},{"location":"reference/yapapi/storage/gftp/","text":"Module yapapi.storage.gftp Golem File Transfer Storage Provider Functions provider def provider ( ) -> AsyncContextManager [ yapapi . storage . StorageProvider ] service def service ( debug = False ) -> AsyncContextManager [ yapapi . storage . gftp . GftpDriver ] Classes GftpDriver class GftpDriver ( * args , ** kwargs ) Golem FTP service API. Ancestors (in MRO) typing_extensions.Protocol Methods close def close ( self , * , urls : List [ str ] ) -> typing_extensions . Literal [ 'ok' , 'error' ] Stops exposing GFTP urls created by publish(files=[..]) . publish def publish ( self , * , files : List [ str ] ) -> List [ yapapi . storage . gftp . PubLink ] Exposes local file as GFTP url. files local files to be exposed receive def receive ( self , * , output_file : str ) -> yapapi . storage . gftp . PubLink Creates GFTP url for receiving file. output_file - shutdown def shutdown ( self ) -> typing_extensions . Literal [ 'ok' , 'error' ] Stops GFTP service. After shutdown all generated urls will be unavailable. upload def upload ( self , * , file : str , url : str ) version def version ( self ) -> str Gets driver version. PubLink class PubLink ( / , * args , ** kwargs ) GFTP linking information. Ancestors (in MRO) builtins.dict Methods clear def clear ( ... ) D.clear() -> None. Remove all items from D. copy def copy ( ... ) D.copy() -> a shallow copy of D fromkeys def fromkeys ( iterable , value = None , / ) Returns a new dict with keys from iterable and values equal to value. get def get ( ... ) D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None. items def items ( ... ) D.items() -> a set-like object providing a view on D's items keys def keys ( ... ) D.keys() -> a set-like object providing a view on D's keys pop def pop ( ... ) D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised popitem def popitem ( ... ) D.popitem() -> (k, v), remove and return some (key, value) pair as a 2-tuple; but raise KeyError if D is empty. setdefault def setdefault ( ... ) D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D update def update ( ... ) D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E is present and has a .keys() method, then does: for k in E: D[k] = E[k] If E is present and lacks a .keys() method, then does: for k, v in E: D[k] = v In either case, this is followed by: for k in F: D[k] = F[k] values def values ( ... ) D.values() -> an object providing a view on D's values","title":"Gftp"},{"location":"reference/yapapi/storage/gftp/#module-yapapistoragegftp","text":"Golem File Transfer Storage Provider","title":"Module yapapi.storage.gftp"},{"location":"reference/yapapi/storage/gftp/#functions","text":"","title":"Functions"},{"location":"reference/yapapi/storage/gftp/#provider","text":"def provider ( ) -> AsyncContextManager [ yapapi . storage . StorageProvider ]","title":"provider"},{"location":"reference/yapapi/storage/gftp/#service","text":"def service ( debug = False ) -> AsyncContextManager [ yapapi . storage . gftp . GftpDriver ]","title":"service"},{"location":"reference/yapapi/storage/gftp/#classes","text":"","title":"Classes"},{"location":"reference/yapapi/storage/gftp/#gftpdriver","text":"class GftpDriver ( * args , ** kwargs ) Golem FTP service API.","title":"GftpDriver"},{"location":"reference/yapapi/storage/gftp/#ancestors-in-mro","text":"typing_extensions.Protocol","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/storage/gftp/#methods","text":"","title":"Methods"},{"location":"reference/yapapi/storage/gftp/#close","text":"def close ( self , * , urls : List [ str ] ) -> typing_extensions . Literal [ 'ok' , 'error' ] Stops exposing GFTP urls created by publish(files=[..]) .","title":"close"},{"location":"reference/yapapi/storage/gftp/#publish","text":"def publish ( self , * , files : List [ str ] ) -> List [ yapapi . storage . gftp . PubLink ] Exposes local file as GFTP url. files local files to be exposed","title":"publish"},{"location":"reference/yapapi/storage/gftp/#receive","text":"def receive ( self , * , output_file : str ) -> yapapi . storage . gftp . PubLink Creates GFTP url for receiving file. output_file -","title":"receive"},{"location":"reference/yapapi/storage/gftp/#shutdown","text":"def shutdown ( self ) -> typing_extensions . Literal [ 'ok' , 'error' ] Stops GFTP service. After shutdown all generated urls will be unavailable.","title":"shutdown"},{"location":"reference/yapapi/storage/gftp/#upload","text":"def upload ( self , * , file : str , url : str )","title":"upload"},{"location":"reference/yapapi/storage/gftp/#version","text":"def version ( self ) -> str Gets driver version.","title":"version"},{"location":"reference/yapapi/storage/gftp/#publink","text":"class PubLink ( / , * args , ** kwargs ) GFTP linking information.","title":"PubLink"},{"location":"reference/yapapi/storage/gftp/#ancestors-in-mro_1","text":"builtins.dict","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/storage/gftp/#methods_1","text":"","title":"Methods"},{"location":"reference/yapapi/storage/gftp/#clear","text":"def clear ( ... ) D.clear() -> None. Remove all items from D.","title":"clear"},{"location":"reference/yapapi/storage/gftp/#copy","text":"def copy ( ... ) D.copy() -> a shallow copy of D","title":"copy"},{"location":"reference/yapapi/storage/gftp/#fromkeys","text":"def fromkeys ( iterable , value = None , / ) Returns a new dict with keys from iterable and values equal to value.","title":"fromkeys"},{"location":"reference/yapapi/storage/gftp/#get","text":"def get ( ... ) D.get(k[,d]) -> D[k] if k in D, else d. d defaults to None.","title":"get"},{"location":"reference/yapapi/storage/gftp/#items","text":"def items ( ... ) D.items() -> a set-like object providing a view on D's items","title":"items"},{"location":"reference/yapapi/storage/gftp/#keys","text":"def keys ( ... ) D.keys() -> a set-like object providing a view on D's keys","title":"keys"},{"location":"reference/yapapi/storage/gftp/#pop","text":"def pop ( ... ) D.pop(k[,d]) -> v, remove specified key and return the corresponding value. If key is not found, d is returned if given, otherwise KeyError is raised","title":"pop"},{"location":"reference/yapapi/storage/gftp/#popitem","text":"def popitem ( ... ) D.popitem() -> (k, v), remove and return some (key, value) pair as a 2-tuple; but raise KeyError if D is empty.","title":"popitem"},{"location":"reference/yapapi/storage/gftp/#setdefault","text":"def setdefault ( ... ) D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D","title":"setdefault"},{"location":"reference/yapapi/storage/gftp/#update","text":"def update ( ... ) D.update([E, ]**F) -> None. Update D from dict/iterable E and F. If E is present and has a .keys() method, then does: for k in E: D[k] = E[k] If E is present and lacks a .keys() method, then does: for k, v in E: D[k] = v In either case, this is followed by: for k in F: D[k] = F[k]","title":"update"},{"location":"reference/yapapi/storage/gftp/#values","text":"def values ( ... ) D.values() -> an object providing a view on D's values","title":"values"},{"location":"reference/yapapi/storage/webdav/","text":"Module yapapi.storage.webdav Classes DavResource class DavResource ( / , * args , ** kwargs ) DavResource(path, length, collection, last_modified) Ancestors (in MRO) builtins.tuple Instance variables collection Alias for field number 2 last_modified Alias for field number 3 length Alias for field number 1 path Alias for field number 0 Methods count def count ( ... ) T.count(value) -> integer -- return number of occurrences of value index def index ( ... ) T.index(value, [start, [stop]]) -> integer -- return first index of value. Raises ValueError if the value is not present. DavStorageProvider class DavStorageProvider ( client : aiohttp . client . ClientSession , base_url : str , auth : Union [ aiohttp . helpers . BasicAuth , NoneType ] = None ) DavStorageProvider(client:aiohttp.client.ClientSession, base_url:str, auth:Union[aiohttp.helpers.BasicAuth, NoneType]=None) Ancestors (in MRO) yapapi.storage.StorageProvider yapapi.storage.InputStorageProvider yapapi.storage.OutputStorageProvider abc.ABC Class variables auth Static methods for_directory def for_directory ( client : aiohttp . client . ClientSession , base_url : str , directory_name : str , auth : Union [ aiohttp . helpers . BasicAuth , NoneType ] = None , ** kwargs ) -> 'DavStorageProvider' Methods new_destination def new_destination ( self , destination_file : Union [ os . PathLike , NoneType ] = None ) -> yapapi . storage . Destination Creates slot for receiving file. Parameters destination_file: Optional hint where received data should be placed. prop_find def prop_find ( self ) upload_bytes def upload_bytes ( self , data : bytes ) -> yapapi . storage . Source upload_file def upload_file ( self , path : os . PathLike ) -> yapapi . storage . Source upload_stream def upload_stream ( self , length : int , stream : AsyncIterator [ bytes ] ) -> yapapi . storage . Source","title":"Webdav"},{"location":"reference/yapapi/storage/webdav/#module-yapapistoragewebdav","text":"","title":"Module yapapi.storage.webdav"},{"location":"reference/yapapi/storage/webdav/#classes","text":"","title":"Classes"},{"location":"reference/yapapi/storage/webdav/#davresource","text":"class DavResource ( / , * args , ** kwargs ) DavResource(path, length, collection, last_modified)","title":"DavResource"},{"location":"reference/yapapi/storage/webdav/#ancestors-in-mro","text":"builtins.tuple","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/storage/webdav/#instance-variables","text":"collection Alias for field number 2 last_modified Alias for field number 3 length Alias for field number 1 path Alias for field number 0","title":"Instance variables"},{"location":"reference/yapapi/storage/webdav/#methods","text":"","title":"Methods"},{"location":"reference/yapapi/storage/webdav/#count","text":"def count ( ... ) T.count(value) -> integer -- return number of occurrences of value","title":"count"},{"location":"reference/yapapi/storage/webdav/#index","text":"def index ( ... ) T.index(value, [start, [stop]]) -> integer -- return first index of value. Raises ValueError if the value is not present.","title":"index"},{"location":"reference/yapapi/storage/webdav/#davstorageprovider","text":"class DavStorageProvider ( client : aiohttp . client . ClientSession , base_url : str , auth : Union [ aiohttp . helpers . BasicAuth , NoneType ] = None ) DavStorageProvider(client:aiohttp.client.ClientSession, base_url:str, auth:Union[aiohttp.helpers.BasicAuth, NoneType]=None)","title":"DavStorageProvider"},{"location":"reference/yapapi/storage/webdav/#ancestors-in-mro_1","text":"yapapi.storage.StorageProvider yapapi.storage.InputStorageProvider yapapi.storage.OutputStorageProvider abc.ABC","title":"Ancestors (in MRO)"},{"location":"reference/yapapi/storage/webdav/#class-variables","text":"auth","title":"Class variables"},{"location":"reference/yapapi/storage/webdav/#static-methods","text":"","title":"Static methods"},{"location":"reference/yapapi/storage/webdav/#for_directory","text":"def for_directory ( client : aiohttp . client . ClientSession , base_url : str , directory_name : str , auth : Union [ aiohttp . helpers . BasicAuth , NoneType ] = None , ** kwargs ) -> 'DavStorageProvider'","title":"for_directory"},{"location":"reference/yapapi/storage/webdav/#methods_1","text":"","title":"Methods"},{"location":"reference/yapapi/storage/webdav/#new_destination","text":"def new_destination ( self , destination_file : Union [ os . PathLike , NoneType ] = None ) -> yapapi . storage . Destination Creates slot for receiving file.","title":"new_destination"},{"location":"reference/yapapi/storage/webdav/#parameters","text":"destination_file: Optional hint where received data should be placed.","title":"Parameters"},{"location":"reference/yapapi/storage/webdav/#prop_find","text":"def prop_find ( self )","title":"prop_find"},{"location":"reference/yapapi/storage/webdav/#upload_bytes","text":"def upload_bytes ( self , data : bytes ) -> yapapi . storage . Source","title":"upload_bytes"},{"location":"reference/yapapi/storage/webdav/#upload_file","text":"def upload_file ( self , path : os . PathLike ) -> yapapi . storage . Source","title":"upload_file"},{"location":"reference/yapapi/storage/webdav/#upload_stream","text":"def upload_stream ( self , length : int , stream : AsyncIterator [ bytes ] ) -> yapapi . storage . Source","title":"upload_stream"}]}